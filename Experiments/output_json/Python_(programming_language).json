{
    "data": [
        {
            "user": "Error",
            "comment": "From what I read, Python has inheritance but no access control (public, private,...). Can someone ellaborate on OOP in Python? -- ",
            "parent_section": "Inheritance ",
            "date_time": " 04:58, 2 Sep 2003 (UTC)"
        },
        {
            "user": "195.167.202.147",
            "comment": "Now this is a beautifully written page with very high technical value. I am afraid though that there is  a little bit of personal oppinion in the philosophy section (and that seems almost normal :) By judging the comments my point of view was confirmed. For what seems to be the technical influence between Perl and Python there is IMHO more than enough evidence to claim a relationship. When it comes to the point of view of the users I think it might be a good idea to outline that there are two groups of people, myself being part of the second one, and I would love if this second group could be mentioned in this article. My idea would be to write something as follows:  \"It is interesting to notice that given the aforementioned similarities [between Perl and Python] there are some who consider them very much different in style and quality. Some others like both languages for their qualities and would rather prefer to see the two languages evolve together\". But great work, really great work. Robert Dober robert.dober@free.fr ",
            "parent_section": "Are there enough users who like both to mention them in this article? ",
            "date_time": " 16:39, 1 Jun 2004 (UTC)"
        },
        {
            "user": "AdmN",
            "comment": "Hi, Pythoners. Over at object oriented programming, I wrote the following:  Python and Ruby are relatively recent languages that were built from the ground up with OOP...  I have recently read some conflicting statements about object based functionality only being added in version 2.2. Over at python.org, I was't able to find anything that specifically mentioned whether or not object orientation was in the language from the beginning. Would anyone know? Thanks. ",
            "parent_section": "Python History ",
            "date_time": " 21:16, 26 Aug 2004 (UTC)"
        },
        {
            "user": "Fredrik",
            "comment": "  AFAIK, Python was object oriented from the start, or at least from very early on. However, types (int, str, etc) and user classes were separate things (e.g. you couldn't make a class that inherited from int) until 2.2. ",
            "parent_section": "Python History ",
            "date_time": " 21:26, 26 Aug 2004 (UTC)"
        },
        {
            "user": "Hgfernan",
            "comment": "Shouldn't be Parrot, the common framework for Python and Perl be mentioned ?  Maybe it's an attempt of Perl to devour Python, maybe it's just a joke... However, it received attention of several important programmers.  For instance, Perl creator. ",
            "parent_section": "What about Parrot ? ",
            "date_time": " 22:38, 4 Sep 2004 (UTC)"
        },
        {
            "user": "Antaeus Feldspar",
            "comment": "An anon user removed all but the outermost braces from the example of the factorial function written in C.  I have reverted it back for the time being because I'm not sure the anon's version is correct, or clear, whereas the pre-edit version is both. Is it correct? The statement blocks from which the anon removed the braces were blocks of one statement each.  Since I have not written C code in a decade, my knowledge is rusty; I believe this may be technically correct, that you may omit the braces from a statement block only if there's only one statement in the block.  However, I am not sure on this point. Is it clear? Even if the code as the anon edited it is compiler-correct, it is misleading; the entire point of the comparison is that Python uses indentation, as opposed to punctuation, which is what C uses in every case except single-statement blocks, where it becomes optional. What should we do about it? In the short term, I have reverted, as previously mentioned.  However, in the long term, we should perhaps decide between three alternatives (assuming that omission of braces is in fact legal in C for single-statement blocks): The code as it was before the anon edit.  The disadvantage is that it does not show the one instance in C where a programmer may choose to omit the braces.  The advantage is that it more accurately reflects the general practices of C.  Since the article is about Python and not C, the disadvantages don't strike me as too significant in this case. The code as it was after the anon edit.  The disadvantage is that it does not show one possible way a C programmer might format their code in the one case where they have a choice.  The advantage is that it is more accurate, at least in terms of how a C programmer might format (many programmers choose to format consistently in the style that is always allowed, even when they language offers a choice.) A different example that requires multiple-statement blocks.  The disadvantage is that it would require careful selection of a new example.  The advantage is that it would not be an artificial example.  This doesn't strike me as too much of an advantage; don't hundreds of computer text books demonstrate basic principles by showing the bubble sort, despite the notorious inefficiency of the bubble sort? I think on the whole my recommendation is for the first alternative, but if anyone disagrees, please bring up the issue here. -- ",
            "parent_section": "Formatting of C examples ",
            "date_time": " 18:26, 21 Sep 2004 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Formatting of C examples ",
            "date_time": " 19:24, 21 Sep 2004 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Formatting of C examples ",
            "date_time": " 11:23, 22 Sep 2004 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Formatting of C examples ",
            "date_time": " 12:33, Sep 22, 2004 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Formatting of C examples ",
            "date_time": " 12:48, Sep 22, 2004 (UTC)"
        },
        {
            "user": "Antaeus Feldspar",
            "comment": "  Factorial function in C int factorial(int x) {           if (x == 0) {                               return 1;                        } else {         return x * factorial(x-1);     } }  is syntactically equivalent to:  int factorial(int x) { if (x == 0) { return 1; } else { return x * factorial(x-1); } }  Factorial function in Python def factorial(x):     if x == 0:         return 1     else:         return x * factorial(x-1)  is not equivalent to:  def factorial(x): if x == 0: return 1 else: return x * factorial(x-1)  Just to present an alternative for consideration, what about presenting both C examples?  Show the   single-line version, show the braced version, then compare them with the Python version.Note that I don't necessarily advocate this alternative, I just suggest it's one of our options.  After the point that Fubar brought up, I think it's probably best to show two examples formatted according to best practice for the respective language, even if that causes confusion for the occasional reader who (sorry, anon) doesn't read the article to understand the difference that the examples demonstrate.  -- ",
            "parent_section": "Formatting of C examples ",
            "date_time": " 17:04, 22 Sep 2004 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Formatting of C examples ",
            "date_time": " 04:37, 23 Sep 2004 (UTC)"
        },
        {
            "user": "Antaeus Feldspar",
            "comment": "- Just want to point out that this is a rather poor way to implement a factorial function. The number of recursions is very quickly exceded.  That's not surprising.  The point is not to implement an efficient factorial function, it's to show the operation of the language. -- ",
            "parent_section": "Formatting of C examples ",
            "date_time": " 02:54, 5 Nov 2004 (UTC)"
        },
        {
            "user": "216.153.214.94",
            "comment": "Feldspar, I am not convinced. Please supply better proof. ",
            "parent_section": "Formatting of C examples ",
            "date_time": " 03:49, 5 Nov 2004 (UTC)"
        },
        {
            "user": "Antaeus Feldspar",
            "comment": "  Wow, Not-Rex-Really, you sure have found a lame and sad way to spend your time.  -- ",
            "parent_section": "Formatting of C examples ",
            "date_time": " 04:38, 5 Nov 2004 (UTC)"
        },
        {
            "user": "Fredrik",
            "comment": "Certainly, a better way to show the operation of the language would be  fac = lambda x: reduce(lambda a,b: a*b, xrange(1, x+1))  ;)  This is anti-Python; code that you can't read and maintain. What is a? What is b? Even the variable name is not clear - fac?For the record, this performs pretty much identically (I timed both with a couple of numbers between 10 and 100000) to     def fac(x):        product = 1        for n in xrange(1, x+1):            product *= n        return product  -- ",
            "parent_section": "Formatting of C examples ",
            "date_time": " 04:32, 5 Nov 2004 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Formatting of C examples ",
            "date_time": " 19:01, 7 Jun 2005 (UTC)"
        },
        {
            "user": "Wile E. Heresiarch",
            "comment": "It is possible that my last edit didn't improve the article in all respects. Comments would be welcome. Three lines were removed; I'll motivate why here:  A comparison between C++ and Python with a lengthy example. The above article is unencyclopedic. I'm going to list it on VfD. Followup: after vfd discussion I moved Python vs C Plus Plus example to Talk:Python programming language/Python vs C Plus Plus example, and talk:Python vs C Plus Plus example to Talk:Python programming language/Talk:Python vs C Plus Plus example. Hth, ",
            "parent_section": "Adventurous editing ",
            "date_time": " 05:22, 1 Oct 2004 (UTC)"
        },
        {
            "user": "Fredrik",
            "comment": " Here is a list of articles with Python programs. The above list belongs in the Wikipedia: namespace. Ditto about VfD.Some of the software used to control the scoreboard at the Melbourne Cricket Ground is written in Python. This fact seems trivial. Python, like every other major programming language, is used in many different places. Maybe this is worth mentioning in the Melbourne Cricket Ground article, but as far as I can see, it's not particularly relevant to Python itself. ",
            "parent_section": "Adventurous editing ",
            "date_time": " 17:49, 23 Sep 2004 (UTC)"
        },
        {
            "user": "Antaeus Feldspar",
            "comment": " I abstain on the other edits (leaning towards agreement) but this one I disagree with.  You know and I know that Python is a major programming language, and we have a good idea of just how major, but we're aiming at a reader who doesn't know.  I think if anything, we should be editing in more places where Python is known to be used, so that the reader gets a real sense of just how widely used it is.  -- ",
            "parent_section": "Adventurous editing ",
            "date_time": " 18:56, 23 Sep 2004 (UTC)"
        },
        {
            "user": "Eric B. and Rakim",
            "comment": "I think it's about time that we move this page to Python. 9 out of Google's top 10 hits for the word \"python\" is to the language and the other one is for Monty Python. The real life snake just isn't interesting enough. ",
            "parent_section": "Python wants Python ",
            "date_time": " 07:07, 12 Jan 2005 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python wants Python ",
            "date_time": " 15:21, 12 Jan 2005 (UTC)"
        },
        {
            "user": "Eric B. and Rakim",
            "comment": "Wow! That's really cool. Searching for the other letters are also interesting. It seems like Google does something with the results so you get very strange results when searching for single letter stuff. ",
            "parent_section": "Python wants Python ",
            "date_time": " 17:38, 13 Jan 2005 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python wants Python ",
            "date_time": " 04:08, 13 Jan 2005 (UTC)"
        },
        {
            "user": "Eric B. and Rakim",
            "comment": "I can refute the \"technical elite\" argument right now, I think more about the other arguments later. Do a book search in a library or book store, search for Python. You will have hard time finding any living snakes. So it is not only Google and the www that has a bias and is part of a technical elite. It's the book publishers and librarians too. AND: \"Python is the common name for the Boidae Family of nonvenomous constricting snakes\u2014specifically the subfamily Pythonidae.\" <- biological elite. :) ",
            "parent_section": "Python wants Python ",
            "date_time": " 17:38, 13 Jan 2005 (UTC)"
        },
        {
            "user": "Antaeus Feldspar",
            "comment": "As big a fan as I am, Python the language just does not have the prominence that would justify it displacing the very thing it was (indirectly) named after.  -- ",
            "parent_section": "Python wants Python ",
            "date_time": " 19:52, 13 Jan 2005 (UTC)"
        },
        {
            "user": "Fredrik",
            "comment": "However, if the block that is being out-commented contains docstrings it wont work and the code wont run.What is that supposed to mean? - ",
            "parent_section": "Confusing statement about docstrings ",
            "date_time": " 02:43, 14 Jan 2005 (UTC)"
        },
        {
            "user": "Eric B. and Rakim",
            "comment": " Imagine this:   def foo():      \"\"\"Hi foo()\"\"\"  \"docstringing\" it out:   \"\"\"  def foo():      \"\"\"Hi foo()\"\"\"  \"\"\"  The compiler will throw a SyntaxError at \"Hi foo()\" because it thinks that is the code. Ok badly phrased, but the essence is that commenting using docstrings is bad. :) ",
            "parent_section": "Confusing statement about docstrings ",
            "date_time": " 02:55, 14 Jan 2005 (UTC)"
        },
        {
            "user": "Fredrik",
            "comment": "  That is not a problem with Python docstrings specifically, but with nested open/close-marked comment in general. Consider the following C example:/* int function() {   /* Returns 0*/   return 0; } */  In fact, Python gives even you a way to avoid the problem; using ''' for the outer comment.The statement as it stands is too vague as it does not explain \"wont work\", and as explained above inaccurate. In fact I don't think it's worth mentioning at all, because it is a trivial syntax error. You also get a syntax error if you nest parentheses incorrectly, but we don't mention that -- for good reasons. ",
            "parent_section": "Confusing statement about docstrings ",
            "date_time": " 00:33, 16 Jan 2005 (UTC)"
        },
        {
            "user": "Quale",
            "comment": "The explanation of parameter passing in Python needs work.  It is a common confusion to say that Python passes values by reference (even among experienced Pythonistas), but GvR explains it correctly in his tutorial.  Basically, all parameters are passed by value, but object values are references.  The reason this becomes an issue is that mutable objects appear to be passed by reference.  Non-mutable objects such as numbers and strings don't show this behavior.  What doesn't seem to be commonly understood is that the same issue shows up with assignment:  x = [1, 2, 3] y = x x[:] = [3, 2, 1] print yIt's also a bit awkward to say that Python variables \"contain\" values.  Python variables actually bind names to values which isn't the same thing.  Looked at that way, you can see that after y = x, y and x are different names bound to the same value.  Mutating the object bound to x will naturally affect the object bound to y -- it's the same object.  That list isn't contained in two different places, it just has two different names.--",
            "parent_section": "Parameter Passing ",
            "date_time": " 21:01, 7 Mar 2005 (UTC)"
        },
        {
            "user": "Fredrik",
            "comment": "  To me, saying that you're passing a value that is a reference just seems like an awkward way of saying that you're passing a reference. ",
            "parent_section": "Parameter Passing ",
            "date_time": " 07:58, 8 Mar 2005 (UTC)"
        },
        {
            "user": "Quale",
            "comment": "It seems that way to many people, but it's incorrect.  The inventor of Python would say Python passes by reference if it was an accurate description of what Python does.  Consider this: def foo(x): x = [3, 2, 1] y = [1, 2, 3] foo(y) print y If a reference to y was passed to foo then y would be changed to [3, 2, 1] after the foo(y) call.  It isn't.  Python like Java, Scheme and most other modern languages, passes parameters by value.  The problem is that many people don't understand what values are in those languages.  The value is really just an object.  It isn't really a reference, although many people say they find it easier to think of it that way.  I wonder if it really does help considering how confused they are about how parameters are passed.  The other common confusion is that many people mistakenly think that passing by value requires making copies.--",
            "parent_section": "Parameter Passing ",
            "date_time": " 17:00, 8 Mar 2005 (UTC)"
        },
        {
            "user": "Fredrik",
            "comment": " What I meant is of course that *objects* are passed by reference. I don't think of variables themselves as being passed around at all - I just think of them as dictionary lookups in locals(), globals() etc... - ",
            "parent_section": "Parameter Passing ",
            "date_time": " 18:04, 8 Mar 2005 (UTC)"
        },
        {
            "user": "Quale",
            "comment": "Well, all values in Python are objects, so everything gets passed the same way.  You would have to say that Python objects are assigned by reference too, because values are passed and assigned the same way.--",
            "parent_section": "Parameter Passing ",
            "date_time": " 01:56, 9 Mar 2005 (UTC)"
        },
        {
            "user": "Fredrik",
            "comment": "Yep, that's what I say. ",
            "parent_section": "Parameter Passing ",
            "date_time": " 07:12, 9 Mar 2005 (UTC)"
        },
        {
            "user": "Quale",
            "comment": "OK.  Now add the fact that the definition of call-by-value is that the value passed is the same kind of value that is used for the right hand side of an assignment and you will correctly conclude that Python is CBV.  For call-by-reference, the value passed is the value that's used on the left hand side of an assignment.  A college programming language theory or compiler class will discuss l-values and r-values. --",
            "parent_section": "Parameter Passing ",
            "date_time": " 07:33, 9 Mar 2005 (UTC)"
        },
        {
            "user": "Fredrik",
            "comment": "Thanks for the explanation. ",
            "parent_section": "Parameter Passing ",
            "date_time": " 07:41, 9 Mar 2005 (UTC)"
        },
        {
            "user": "Antaeus Feldspar",
            "comment": "If someone wants to know what Python really uses, do a literature search for call-by-object-reference and/or call-by-sharing (see CLOS papers for early use of these terms).  While saying that Python uses call-by-value is slightly less misleading than saying that Python uses call-by-reference, it's not CBV in any of the traditional senses.Quale, would you mind taking a look at Call-by-something?  It's a mess and really needs to be cleaned up by someone who knows what they're talking about, and it seems like you have the knowledge.  -- ",
            "parent_section": "Parameter Passing ",
            "date_time": " 18:22, 8 Mar 2005 (UTC)"
        },
        {
            "user": "Quale",
            "comment": "Funny you should mention that.  I looked at parameter (computer science) earlier today and it isn't good.  I'll take a crack at it probably in the next couple of days.  As you know it's hard to explain.  It's made a little harder by the fact that practicing programmers use the terms a lot more loosely than computer science language theorists do.  The distinctions are  subtle and many extremely competent programmers who aren't theorists find the definitions have consequences that they find counterintuitive (such as Python, Java and Pascal all being call-by-value languages).--",
            "parent_section": "Parameter Passing ",
            "date_time": " 01:56, 9 Mar 2005 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Parameter Passing ",
            "date_time": " 11:48, 21 Jun 2005 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Parameter Passing ",
            "date_time": " 03:40, 7 February 2006 (UTC)"
        },
        {
            "user": "Daniel Quinlan",
            "comment": "I moved Python (disambiguation) to Python and Python to Python (snake) to make the Wikipedia easier to navigate.  A large number of the python links were about the language and this will reduce the average number of clicks to get around.  I know some people here would have liked this article to become the main Python page, but I think that's a bit computer programmer centric and would simply reverse the problem.  I followed the example of Cobra. Still, the existing links to Python that are about the language should be fixed to point directly to this article.  ",
            "parent_section": "Related page moves ",
            "date_time": " 09:40, Mar 8, 2005 (UTC)"
        },
        {
            "user": "Neilc",
            "comment": "Sayeth the article:  Because Python permits functions as arguments, it is also possible to partially simulate more subtle functional constructs, such as the continuation.In what sense are continuations \"functional\"? ISTM they are imperative, in the sense that they are a facility for manipulating control flow. ",
            "parent_section": "continuations as functional? ",
            "date_time": " 12:50, 1 Apr 2005 (UTC)"
        },
        {
            "user": "Antaeus Feldspar",
            "comment": "  Maybe you should ask at Talk:Continuation? -- ",
            "parent_section": "continuations as functional? ",
            "date_time": " 01:34, 2 Apr 2005 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "continuations as functional? ",
            "date_time": " 10:15, 2005 Apr 2 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "continuations as functional? ",
            "date_time": " 17:15, 2 Apr 2005 (UTC)"
        },
        {
            "user": "Antaeus Feldspar",
            "comment": "FOo, it looks like Duchier is showing how Python can currently be used to simulate continuations -- but this doesn't mean that continuations are part of the language.  For instance, you could simulate a GOTO in Python with something like the following:if not (shouldGOTOLine500):  # line 470     furble(x)            # line 480     quimble(y)           # line 490 foobaz(x,y)              # line 500  but it wouldn't be a GOTO, merely a simulation of one.  In the same sense, you can simulate continuations by rewriting your code, and certain language features like exception handling and generators work in continuation-like ways -- but continuations, like GOTOs, are not a feature present in the language.Warning:  I may be completely wrong about all this, as I do not claim to be an expert on continuations or anything near expert. -- ",
            "parent_section": "continuations as functional? ",
            "date_time": " 00:45, 3 Apr 2005 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "continuations as functional? ",
            "date_time": " 02:29, 3 Apr 2005 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Printing example ",
            "date_time": " 19:08, 7 Jun 2005 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "A recent edit inserted an unencyclopedic disparagement of PyPy.  Something to the effect that it \"wanted to be faster than C, but that's absurd.\"  The comment is not phrased appropriately, in any case, but as background, such a goal is actually not absurd.  I'm not saying it will be accomplished, but it is not impossible in principle. PyPy builds on the work in Psyco, which is a nice project.  Specifically, Psyco can (and does) dynamically build machine code for execution of particular code paths and type constraints.  Specializations can be quite highly optimized, and some of this optimization is only available at runtime, not during a static compilation (such as in a C program). To take a small example, suppose you need to loop over a list of \"thingamagigs\"\u2014e.g. a bunch of PyObject structures.  A C program dealing with those structures would need to test some structure members during each pass through the loop, then branch to different actions based on those members; say do something different with a float, int, and string that were wrapped in a PyObject structure.  Pscyo\u2014and by extension PyPy\u2014might be able to determine that during the next million passes through the loop, the structure always holds an int, and therefore skip the dereferencing and branching steps for those million passes.  In other words, the specialization goes faster than the \"generic\" C code, based on state that can only be determined at runtime. It may not work this way often enough to actually get \"faster than C\", but the possibility exists conceptually. ",
            "parent_section": "About PyPy ",
            "date_time": " 17:31, 2005 May 22 (UTC)"
        },
        {
            "user": "Fredrik",
            "comment": "  It was most likely not intended to be a disparaging comment.  \"Rumors have it that the secret goal is being faster-than-C which is nonsense, isn't it?\" is part of PyPy's tagline, and can be found on the website. ",
            "parent_section": "About PyPy ",
            "date_time": " 10:33, 24 May 2005 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "Actually, I did see the updated PyPy page w/ the tagline after I made the change.  In that context, it's humorous on Armin's (or maybe Christian's) part.  However WP readers won't get that it is a self-deprecating joke, as opposed to just a deprecation.  I would be OK with it if someone wanted to put \"Whose tagline is: '...faster-than-C which is nonsense'\".  But that's probably a digression from the Python page, and better moved to the Psyco page. ",
            "parent_section": "About PyPy ",
            "date_time": " 17:55, 2005 May 24 (UTC)"
        },
        {
            "user": "Fredrik",
            "comment": "I wouldn't call it self-deprecating. Rather provocative. ",
            "parent_section": "About PyPy ",
            "date_time": " 18:26, 24 May 2005 (UTC)"
        },
        {
            "user": "Liso",
            "comment": "Are u sure this article is in proper categories? ",
            "parent_section": "Category:Monty Python ",
            "date_time": " 10:20, 24 May 2005 (UTC)"
        },
        {
            "user": "Eric B. and Rakim",
            "comment": " Maybe, maybe not. Python was named after Monty Python. ",
            "parent_section": "Category:Monty Python ",
            "date_time": " 08:35, 15 Jun 2005 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "What's the story with someone(s) reinserting the broken and redundant link to Dive into Python.  It's a fine book, but there's already an external link to it.  Why the extra link to a removed Wiki page, without even putting the link into the grammatical context of the reference? ",
            "parent_section": "Dive into Python broken link ",
            "date_time": " 06:17, 2005 Jun 7 (UTC)"
        },
        {
            "user": "Xcali",
            "comment": "  The page was not removed. The link was not broken - the page was incorrectly marked as being in violation of copyright. All steps to remedy the situation have already been taken and it now only awaits admin action to remove the bogus copyright violation edit done by ",
            "parent_section": "Dive into Python broken link ",
            "date_time": " 18:44, 7 Jun 2005 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "Well, OK... but at least put the link into the grammatical context of the reference.  As is, it sits as an ugly non-sentence after the actual description (and external link), and looks like some weird typo. ",
            "parent_section": "Dive into Python broken link ",
            "date_time": " 20:45, 2005 Jun 7 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Dive into Python broken link ",
            "date_time": " 00:07, 8 Jun 2005 (UTC)"
        },
        {
            "user": "JohnElder",
            "comment": "I did not delete it!  I moved the Wiki link into the main body text, with the external link following that.  Your (",
            "parent_section": "Dive into Python broken link ",
            "date_time": " 02:09, 2005 Jun 8 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": " Subsections (1): Section: Resolving copyright dispute (2): I'm sorry - I should have paid more attention to the diff. My bad - but go easy on me, I'm new at this. How does one resolve a copyright issue? I've taken all the steps that the message tells me to, but nothing seems to change. Am I supposed to revert the page myself? I've even rewritten it (the original had room for improvement) on the Dive into Python/Temp page ... I don't know what to do next.  I'm afraid I don't know the answer about fixing the copyright question.  I've never dealt with that issue.  I think I take it from your comment that you posted a review or summary that you had written of Pilgrim's book, then someone noticed you had also posted your review elsewhere, and thought that was suspicious.  Is that the sequence? Maybe whoever challenged the copyright release of the page is familiar with the rules for proving it's released properly; you could try their talk page for clarification (I'm sure it's buried somewhere in the WP administrative documents too, but I don't know where). ",
            "parent_section": "Dive into Python broken link ",
            "date_time": " 12:15, 2005 Jun 8 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "The idea of eliminating tabs for indentation has been floating around the Python community for at least 7 years.  But it's never happened yet, nor been pronounced for the future by the BDFL anywhere I've seen.  Does the editor who added it to the article have some specific evidence of this? ",
            "parent_section": "Tabs as whitespace removal?! ",
            "date_time": " 15:46, 2005 Jun 10 (UTC)"
        },
        {
            "user": "Flatline",
            "comment": "  I thought I had read it in Python In A Nutshell, but am unable to find it now. My appologies for not going back to my sources before editing. It won't happen again. --",
            "parent_section": "Tabs as whitespace removal?! ",
            "date_time": " 14:59, 2005 Jun 13 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Pythonistas ",
            "date_time": " 00:37, 16 Jun 2005 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "I think Pythonista would be great as a separate entry.  I was thinking of making it, but haven't got around to it.  There's not a whole lot to put there, but at least a definition and a redirect back to Python programming language. ",
            "parent_section": "Pythonistas ",
            "date_time": " 02:08, 2005 Jun 16 (UTC)"
        },
        {
            "user": "Antaeus Feldspar",
            "comment": "This is \"Mac Classic\" rather than \"Mac OS\" for a reason.  \"Mac OS\" includes the two disjoint subsets \"Classic\" and \"Mac OS X\".  \"Mac OS X\" has already been listed as one of the most popular platforms Python runs on; now \"Mac Classic\" is listed as another platform it runs on.  OK?   No. Classic is the compatibility environment within Mac OS X. There is no such thing as Mac OS Classic. There is Mac OS 9, Mac OS 8, etc. Please check the name in http://www.apple.com before inventing new names :) Mac Classic is not an official name, no.  However, it is a name widely used to refer collectively to those versions of the Macintosh OS prior to Mac OS X, something you might have discovered if you had checked what \"Mac Classic\" linked to before you altered the link.  Care to correct the mistaken impression the passage now gives? -- ",
            "parent_section": "Supported Platforms: Mac OS ",
            "date_time": " 21:37, 25 Jun 2005 (UTC)"
        },
        {
            "user": "Nir Soffer",
            "comment": " I would not use a widely used mistake here - only the official names. About older version then Mac OS 9, I don't know if they are supported. As far as I know, Python support Mac OS 9, and even that support is not complete or was problematic. Anyway, if older version are supported, we can use \"Mac OS 9 (with some support for older versions)\" or similar text. --",
            "parent_section": "Supported Platforms: Mac OS ",
            "date_time": " 07:18, 26 Jun 2005 (UTC)"
        },
        {
            "user": "Nir Soffer",
            "comment": "I remove the sentence about the MacPython IDE, which was wrong. It belong to a section about IDEs and editors, if we need one. --",
            "parent_section": "Python IDEs and editors ",
            "date_time": " 07:36, 26 Jun 2005 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "using multi-line strings to comment out blocks ",
            "date_time": " 06:46 (UTC)"
        },
        {
            "user": "Lenard Lindstrom",
            "comment": "I wish to mention that Stackless Python has not supported continuations since early 2002, as I explain in Talk:Stackless_Python. Maybe Section 6, Other Features should be updated. --",
            "parent_section": "Continuations gone from Stackless Python ",
            "date_time": " 18:47, 24 July 2005 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "  I removed the mention.  --",
            "parent_section": "Continuations gone from Stackless Python ",
            "date_time": " 11:03, 7 March 2006 (UTC)"
        },
        {
            "user": "Kenliu",
            "comment": "While it is true that both java and .Net have immutable String classes, I don't think it is worth mentioning in the context of the base types section, in the interest of keeping the article length down.  Could I also suggest that comparisons to other languages are kept to languages that have share a lineage with python, at least when discussing specific language features?  --",
            "parent_section": "Immutable Strings in java and .Net and comparisons to other languages in general ",
            "date_time": " 20:32, 30 August 2005 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "  I tend to agree with this.  Additionally in support, there's always a selectivity about which languages serve as the comparisons (with people picking their couple \"favorites\" as the analogues).  But a lot of languages that aren't listed also have immutable strings (or whatever other feature might be stated to be shared between Python and X). If some feature is truly rare, the comparison might be merited, since we could pretty much complete the list; for example, pretty much only Python and Haskell, among general programming languages, use the \"offside rule\". ",
            "parent_section": "Immutable Strings in java and .Net and comparisons to other languages in general ",
            "date_time": " 20:50, 2005 August 30 (UTC)"
        },
        {
            "user": "Samohyl Jan",
            "comment": "I agree. I thought about reverting the mention, but I wasn't sure and didn't thought it is a significant enough change to warrant an edit war. Btw, what is \"offside rule\"? ",
            "parent_section": "Immutable Strings in java and .Net and comparisons to other languages in general ",
            "date_time": " 20:58, 30 August 2005 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "Read the Python article :-).  Actually, I guess the article spells it off-side rule. Basically, it just means \"the whitespace thing\". ",
            "parent_section": "Immutable Strings in java and .Net and comparisons to other languages in general ",
            "date_time": " 21:57, 2005 August 30 (UTC)"
        },
        {
            "user": "Samohyl Jan",
            "comment": "Oh, I am silly. But I swear, I know Python... Thanks, ",
            "parent_section": "Immutable Strings in java and .Net and comparisons to other languages in general ",
            "date_time": " 22:17, 30 August 2005 (UTC)"
        },
        {
            "user": "Kenliu",
            "comment": "Believe me, I thought it would be stupid to start an edit war over something as trivial as this, but someone has to draw the line in the sand before someone goes off and starts comparing python to VB and PHP.  (although python vs. ruby might be interesting).  Besides, .NET isn't even a language, right?  --",
            "parent_section": "Immutable Strings in java and .Net and comparisons to other languages in general ",
            "date_time": " 19:01, 31 August 2005 (UTC)"
        },
        {
            "user": "Samohyl Jan",
            "comment": "I have decided to remove all other comparisons. Python page is long, and it's maybe better to compare the language features on the pages about each feature (that's why links are here for). But I won't enforce this. Btw, a good recent comparison of Python and Ruby is [1]. ",
            "parent_section": "Immutable Strings in java and .Net and comparisons to other languages in general ",
            "date_time": " 20:37, 31 August 2005 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Immutable Strings in java and .Net and comparisons to other languages in general ",
            "date_time": " 23:40, 31 August 2005 (UTC)"
        },
        {
            "user": "Kenliu",
            "comment": "I would suggest reverting some of the edits that discuss language features that were directly influenced by other languages, such as list comprehensions from Haskell.  Perhaps an alternative would be to discuss Python's lineage in the history section, or to add another section discussing comparisons with other languages in general.  For instance, I think it would be useful for a WP reader to know that Python is often compared to perl, and now ruby. --",
            "parent_section": "Immutable Strings in java and .Net and comparisons to other languages in general ",
            "date_time": " 11:46, 1 September 2005 (UTC)"
        },
        {
            "user": "Samohyl Jan",
            "comment": "As I said above, I think that Haskell influence is quite well elaborated on list comprehension. Why have any comparisons at all, shouldn't there be a list of features and link to these articles enough for reader? If there are n languages with some feature, then having comparisons on language pages means having n comparisons, instead of one, would the comparison be on the page about the feature. As for the fact that Python is compared to Perl and Ruby, it's in the leader, so maybe interested reader could read these articles as well and make his own opinion? But as I said above, you are free to change whatever you want. ",
            "parent_section": "Immutable Strings in java and .Net and comparisons to other languages in general ",
            "date_time": " 14:50, 1 September 2005 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "I agree with Samohyl that features like this are pretty well discussed on linked pages, and the Python page is cleaner if it just provides the link.  If you think the discussion on list comprehension misses something important, just add that content/discussion there.However, what I think would be valuable would be a general Comparisons of programming language features page.  As I have it in my mind, this would list maybe a dozen widely used or widely known programming languages, and have a checklist of various things that are true or false (or vary among more than two possibilities) for each language.  Probably that page would be primarily tabular.I think such tables should avoid contentious or complicated \"features\" like \"Is easy to use\" or \"Runs at full native speed\".  Those are subjective and context-dependent.  But you might have something like:                 Python   Haskell     Perl   C/C++   Java   Pascal      Ruby    ...  Block marking:  Offside  Offside/{}  {}     {}      {}     begin/end   begin/end,{}  List compr      Yes      Yes         No*     No     No     No          No*  ...  [*] Code-blocks fill a similar role to listcomps in this language  If we had that, Python, along with various other languages, could each link to such a page. ",
            "parent_section": "Immutable Strings in java and .Net and comparisons to other languages in general ",
            "date_time": " 17:01, 2005 September 1 (UTC)"
        },
        {
            "user": "Kenliu",
            "comment": "I think it is worthwhile to discuss the influence of other languages on the design of Python.  I now think that this information is best left in the history section rather than cluttering up the rest of the article.  I'll have to do some more research and add it later.  The chart showing language comparisons is a good idea; however, I think you will have problems keeping the list of languages short - and there will undoubtedly be some debate about which languages to include in the chart. --",
            "parent_section": "Immutable Strings in java and .Net and comparisons to other languages in general ",
            "date_time": " 13:45, 2 September 2005 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "There wouldn't be any need to keep it short, I think.  If 8-10 columns would fit comfortably, we could simply copy the whole table with a new set of headers to add more languages to the matrix.  If editors had info on more than those initial 10 languages, the several tables might be arranged by some principle (scripting vs. compiled? OOP vs. functional vs. imperative? decade of creation?), and each subtable could contain all in one type.  It's true that you don't get as easy of a side-by-side for some comparisons with multiple tables, but I think that's livable. ",
            "parent_section": "Immutable Strings in java and .Net and comparisons to other languages in general ",
            "date_time": " 17:49, 2005 September 2 (UTC)"
        },
        {
            "user": "PhilipR",
            "comment": "I've made a couple of changes to the Web references section that I hope aren't stepping on any toes, but if anyone disagrees I'll put my rationale here and we can discuss:  Sublist for python.org links - I agree that these are useful to hightlight the wiki and doc page.   I've never seen a second-level list used for this in WP, but I think it's clearer so that someone who's already scoured python.org and is looking for other sites can easily jump to non-python.org links.   Ditto Vaults of Parnassus.Removal of past doc versions - I don't see that this merits highlighting.   /doc is useful to everyone who cares about Python; /doc/versions.html probably isn't, and for those who do care it's linked fairly conspicuously from /doc.Addition of Cheese Shop - This is a very important python.org subdivision so I think it bears emphasis.Move of wiki to top of sublist - I think giving other subject-matter wikis emphasis, when such wikis are active and informative, is a good idea.Move of wiki page PythonSpeed/PerformanceTips - I'm not crazy about listing this among all the possible wiki pages, but someone thought it merited inclusion so that's fine.   However, I moved it to be with the wiki.   Thought about making a third-level list, but with only one item that seemed overkill.Please let me know of any disagreement.  Thanks, ",
            "parent_section": "Tweaks to python.org links ",
            "date_time": " 14:48, 23 September 2005 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "An editor added this text:  Guido van Rossum has stated that the next major release of Python will no longer support functional programming constructs such as lambda, map, filter or reduce, the rationale being that map and filter are equivalent to list comprehensions in power, lambda is irrelevant with the advent of nested functions, and that reduce is incomprehensible to the majority of programmers who do not have a functional programming background.However, this idea of removing lambda/map/filter/reduce has been floating around since at least Python 1.5.2.  It's always been suggested as something that \"many people would like\", but I have never seen an actual pronouncement on this (except in the hypothetical context of the great, incompatible, Python 3000; that's a half joking way to talk about some distant future). If the editor can provide a citation to a specific statment by GvR, I'm fine with including that.  Otherwise, it's just speculation. ",
            "parent_section": "Removal of functional builtins? ",
            "date_time": " 05:49, 29 September 2005 (UTC)"
        },
        {
            "user": "Jogloran",
            "comment": " Please consult the link I added to the External links section. Straight from the BDFL's mouth. ",
            "parent_section": "Removal of functional builtins? ",
            "date_time": " 08:50, 29 September 2005 (UTC)"
        },
        {
            "user": "Enochlau",
            "comment": "  The project that the moniker Python 3000 stands for may be dead, but the article indicates that his is a contemporary opinion. I've included the text back in, changing the verb to suggested - a little bit less affirmative than before. I've also included an inline reference, although as Jogloran noted, the reference was provided at the bottom of the page. Also, I note that this article is getting a little long, and would benefit from using a good system of footnoting: Wikipedia:Footnote3. ",
            "parent_section": "Removal of functional builtins? ",
            "date_time": " 09:11, 29 September 2005 (UTC)"
        },
        {
            "user": "Fredrik",
            "comment": "Python 3000 is everything but dead. There's been plenty of discussion and updates to PEP 3000 in the last few months. ",
            "parent_section": "Removal of functional builtins? ",
            "date_time": " 10:54, 29 September 2005 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "About map, filter and reduce:  The article states that Python 3000 \"will not support\" them, but i'm pretty sure the official plan has always been merely to remove them from the builtin namespace, not from the language entirely.  In other words, they're being moved to the standard library, which is very different to what the article is suggesting. Also, the reason given for the lambda syntax's deprecation (\"lambda is irrelevant with the advent of nested functions\") sounds entirely non-sensical to me: the advent of nested scopes affected lambda and def functions equally (both map to the same underlying implementation, anyway).  Instead, the reason lies primarily with the fact that the syntax is ugly and unpythonic, and/or limited to a single expression (depending on who you ask). I think the general feeling is that if a good syntax for anonymous functions is found, it will replace lambda, possibly before Python 3000, even.  (Compare this situation to the conditional expression syntax that was recently decided upon, after being kicked around for years in online discussion.) --",
            "parent_section": "Removal of functional builtins? ",
            "date_time": " 10:53, 27 January 2006 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "  Update: Guido has more or less officially given up on finding a replacement syntax for lambda; PEP 3000 has already been updated. --",
            "parent_section": "Removal of functional builtins? ",
            "date_time": " 13:05, 28 February 2006 (UTC)"
        },
        {
            "user": "Fredrik",
            "comment": "This article is in need of shortening. I can think of a couple of segments that could (and should) be trimmed, but there is also much useful detail that definitely can't be removed. Clearly, at least one daughter article needs to be created. One on Python syntax might be a good idea. And maybe another page on semantics, the object system, idioms, or some combination thereof... but I'm not sure how it should be named and focused. List of Python software is obvious, though. Thoughts? ",
            "parent_section": "Page size ",
            "date_time": " 21:19, 29 September 2005 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Page size ",
            "date_time": " 23:13, 29 September 2005 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Page size ",
            "date_time": " 23:18, 29 September 2005 (UTC)"
        },
        {
            "user": "Epl18",
            "comment": "I Think that it should stay in Wikibooks: Python -",
            "parent_section": "Page size ",
            "date_time": " 20:41, 8 January 2006 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "I agree.  The \"Software written in Python\" list can be moved to a separate article, or possibly be replaced with a link to an directory of Python software on the internet (anyone know of one?).  Personally, i don't see the usefulness of the exhaustive \"Supported platforms\" list (as opposed to a link to somewhere on python.org), and wouldn't miss it.   --",
            "parent_section": "Page size ",
            "date_time": " 12:26, 9 January 2006 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "I don't agree with removing the python usage section. Okay, maybe we don't need a long list full of bullets; but a couple of examples would be nice. This should be a section that non-programmers understand as well.It was not removed.  It was refactored to a sibling article, with prominent links back and forth between the two.  If you'd like to expand upon Python software or provide more narrative context, that would be great.  But splitting pages as they grow is just part of the normal flow of editing. ",
            "parent_section": "Page size ",
            "date_time": " 19:09, 25 January 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Page size ",
            "date_time": " 16:14, 25 January 2006 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "I don't think it would be bad to have another sibling/child for syntax.  But what we present now about syntax is pretty short, and doesn't really seem to merit an article as-is.  Still, if you planned on expanding it considerably, refactoring in that manner might make sense (but get some other opinions on this talk page before you do it). ",
            "parent_section": "Page size ",
            "date_time": " 19:09, 25 January 2006 (UTC)"
        },
        {
            "user": "Fredrik",
            "comment": "Pythonistas who are WP editors might be interested in Wikipedia:Articles for deletion/David Mertz.  Yeah, that's me under a non-Wikipedia name; but I think my noteriety is most significant in the Python community.  Folks who know (of) me could \"do me a solid\".  Btw. While we're at it, we could really use articles Tim Peters (computer guy), Alex Martelli, Mark Pilgrim, ",
            "parent_section": "Minor vanity ",
            "date_time": " 06:03, 10 October 2005 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Should pywikipedia be mentioned? ",
            "date_time": " 17:45, 11 October 2005 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "  The Python interface to CVS is mentioned as a Python tool.  That would probably have been a better analogy for me to make in the edit history than Google was, since it's about interfacing with a computer service, rather than the service itself being written in Python.  Even as a dedicated Pythonista, I've never used pywikipedia myself (nor PyCVS, for that matter).  But strictly from a Python perspective, I find it informative that people have written these interface tools to well-known servers. I know, of course, that WP is a particular site, and CVS a type of server, but I think the concepts are still close; at this point, more people might use WP than CVS, given newer revision control systems.P.S. I have no idea what the state of Python interfaces to IRC are.  But if any are well developed and widely used, yeah, we should mention them. ",
            "parent_section": "Should pywikipedia be mentioned? ",
            "date_time": " 18:21, 11 October 2005 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "I partially glossed over Rspeer's comment, specifically about no Debian package for pywikipedia.  Admittedly knowing little about the tool, maybe I have the wrong impression.  If it really is a very \"in-house\" type thing, it's inclusion is less obvious (not excluded, Google's use is \"in-house\" too, but interesting).  How many people actually do anything with pywikipedia? How important is what it does? I'll defer to other editors on the answer, and whether to remove it. ",
            "parent_section": "Should pywikipedia be mentioned? ",
            "date_time": " 18:31, 11 October 2005 (UTC)"
        },
        {
            "user": "Hgfernan",
            "comment": "First of all, my congratulations for the Pythonists for such an interesting and enlightening article about Python.  I'm considering to extend the text on the object-oriented side of Python to include the class notation.  Some comparisons of Python's features with the ones from C++ and Java may help enlight the newcomer to Python.  I'm afraid the article will become a little too long. Should a new article be started to discuss this ?  Regards, --",
            "parent_section": "Shouldn't a little more on class notation be presented? ",
            "date_time": " 17:31, 15 October 2005 (UTC)"
        },
        {
            "user": "Epl18",
            "comment": "  As Lulu of the lotus eaters suggests above, that would fit into a comparison if one is made. I think its also mentioned in wikibooks:Python_Classes. ",
            "parent_section": "Shouldn't a little more on class notation be presented? ",
            "date_time": " 20:52, 8 January 2006 (UTC)"
        },
        {
            "user": "Arny",
            "comment": "I've added reference to Vampire: The Masquerade - Bloodlines which uses python for scripting. Because the game is based on Valve's Source engine used in Half-Life 2, I'm not sure if this is specific to the Vampire game, or is it part of the engine. If someone knows the latter is true, please change my addition to reference the engine instead of the mentioned game. --",
            "parent_section": "About Python use in videogames ",
            "date_time": " 03:46, 23 October 2005 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "I would rather avoid listing text editors in this already over-long article.  It's extremely peripheral to the topic of Python as a programming language that some particular text editor (or IDE, inasmuch as there is a difference) happens to have some bindings to customize it for Python.  In most cases, editors likewise have bindings for many other languages.  Some other article on \"programming editors\" or the like would be a more appropriate place to list such things. ",
            "parent_section": "Text editors/IDEs ",
            "date_time": " 03:29, 26 October 2005 (UTC)"
        },
        {
            "user": "Benni B.",
            "comment": "The section \"Logical operators\" is hard to understand to me. I'm new to Python though I know a handful of other languages quite well. I'll check back once I know Python better. ",
            "parent_section": "Section \"Logical operators\" incomprehensible ",
            "date_time": " 00:43, 20 November 2005 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Section \"Logical operators\" incomprehensible ",
            "date_time": " 05:04, 20 November 2005 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Project links ",
            "date_time": " 18:54, 23 November 2005 (UTC)"
        },
        {
            "user": "\u00c6var Arnfj\u00f6r\u00f0 Bjarmason",
            "comment": "I modified the example which compared C code to Python code, because it added unnecessary curly braces, possibly as a biased way to show Python's neatness. --Phill  That bothered me before but I didn't change it. I think the whole example is bad, with or without braces, with braces it's biased because C doesn't need them in that case and without them it just sucks because it's meant to demonstrate that whitespace is significant in Python with regards to blocks but isn't in most other languages. Without the braces the example doesn't really convey the point clearly enough.Off topic: I would have written that as return n == 0 ? 1 : n * factorial(n-1) in C and [*] 1..$n in my favorite language, guess which;) \u2014",
            "parent_section": "Biased C Example ",
            "date_time": " 22:25, 23 December 2005 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "Is it universally acknowledged that Python does in fact have closures? The example, that intends to prove that it does in fact have them, seems a bit far fetched to me. I think could make a similar example in C++, using templates and function objects, and then say that C++ supports closures. Or surely in Java, perhaps with inner classes. Most people would agree that C++ or Java doesn't have closures. I think, that by closures, most people mean a language where \"stack-frames\" are saved on the heap, instead of on the stack. Personally, I think the python-way is the best, but I still don't think it's closures. Be proud of not having closures!  Closures don't have anything to do with whether you allocate call frames on the heap or the stack;  they are about the behavior and lifetime of nested functions' namespaces.  (It's a convenient implementation detail that heap-allocated frames allow closures more easily, but you find languages implementing closures both ways.)The article's example is messy, and not close to anything you'd ever write in practice, but it is definitely using closures.  It's hard to come up with good examples...  the trouble with most of them, if they're not contrived to begin with, is that by virtue of having to be small and self-contained, they don't really get a chance to show the benefit of closures in reducing code size and complexity.  Here's another try, though;  a caching function wrapper:def cached(func):     cache = {}     def wrapper(*args):         if args not in cache:             cache[args] = func(*args)         return cache[args]     return wrapper  class Cached(object):     def __init__(self, func):         self.func = func         self.cache = {}     def __call__(self, *args):          if args not in self.cache:              self.cache[args] = self.func(*args)          return self.cache[args]  The first is the closure version; the second emulates it by mirroring the __init__ function's namespace to instance attributes.  In practice, you find many such \"association\" objects in closure-less languages, existing merely to contain and associate state that was already contained and associated in the namespaces of the functions that defined them.--",
            "parent_section": "Closures ",
            "date_time": " 02:41, 29 December 2005 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "Piet Delport's example is an improvement.  But I tend to think we could do without the exampe altogether.  Basically just a couple sentences that say \"Python supports closures, but their use requires mutable parameters, unlike in some more strongly functional languages\".  Then maybe a link to an external example in some Python tutorial or the like.  We don't need to teach people to program Python here, just let them know what it is.  So mentioning something exists is often sufficient, without necessarily teaching readers the details. ",
            "parent_section": "Closures ",
            "date_time": " 03:32, 29 December 2005 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "I agree. Minor issue:  the phrase \"their use requires mutable parameters\" seems unclear to me.  I assume you're talking about the limitation that Python doesn't allow changing the surrounding closure, only reading it (thus requiring indirect changes to mutable objects)?  Two things are worth disambiguating:  First, you don't require this workaround to use closures in Python;  many (dare i say \"most\"?) use cases of closures only need to read the surrounding bindings.  Second, the limitation is actually only a syntactical one:  since the Python runtime is open/introspectable, you can change the surrounding closure directly using non-syntactical means.  In other words, it's more accurate to say that Python does have full closure support, but doesn't (yet) have a syntax for changing the surrounding closure.(This whole issue is a good example of Python's (sometimes overwhelmingly) strong focus on elegant syntax, by the way:  until a good syntax is found for disambiguating local and outer (closure) variable assignments, the designers would rather keep the feature inaccessible, than let working, but \"unpythonic\" syntax leak into the language.  (This is similar to the long-standing single-expression lambda limitation:  the runtime doesn't even make any distinction between function objects created using \"def\" and \"lambda\", but the (current) syntax limits the latter to one expression.)) --",
            "parent_section": "Closures ",
            "date_time": " 12:36, 31 December 2005 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "I removed the confusing and tangential example of closures deliberately.  An anon put something back, but I feel strongly the article is better without it. ",
            "parent_section": "Closures ",
            "date_time": " 05:07, 25 February 2006 (UTC)"
        },
        {
            "user": "165.170.128.66",
            "comment": "I was going to say there was missing a section on criticisms of the language, but I see the subject has already been raised, so I just want to add my support for the idea. A while back I remember seeing something about flaws and experiments in the language that didn't work out well, and was specifically looking for that information.  It's not in this article, and I think it should be. \u2014",
            "parent_section": "How about Criticisims? ",
            "date_time": " 23:44, 5 January 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "How about Criticisims? ",
            "date_time": " 05:05, 13 September 2006 (UTC)"
        },
        {
            "user": "Kris Schnee",
            "comment": "  About the speed issue, the closest reference I see to the fact that \"some people criticize Python as being too slow\" is this phrase: \"Python's design does not emphasize runtime speed.\" And this is in the \"philosophy\" section, which doesn't really present it as a criticism. Although I've been working in Python up till five minutes ago, I think it's worth having a brief section that explains weaknesses of the language, even if it means being a bit redundant in referring to Psyco and other solutions. (Fantasizing) \"If this code goes over 50 FPS, the python's armed...\" --",
            "parent_section": "How about Criticisims? ",
            "date_time": " 06:36, 13 September 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "How about Criticisims? ",
            "date_time": " 05:25, 14 September 2006 (UTC)"
        },
        {
            "user": "Paddy3118",
            "comment": "I would have thought that Python 3000 would be peripheral to many reading the page . Personally I think of discussions about 'the next great jump' in a languages evolution to be very important to the developer, but of much less import to the average user , and maybe detrimental to the non-user. As i write, it is section 2.1 of around 30-odd sections. I think readers might get the idea that Python changes too much. ",
            "parent_section": "Why such prominance for Python 3000? ",
            "date_time": " 13:22, 23 February 2006 (UTC)"
        },
        {
            "user": "TuukkaH",
            "comment": "Python 3000 is free to be started, analogous to for example Perl 6. This article can just mention it in relation to history, or have an overview section and link to more info. People shouldn't be discouraged to contribute just so that the article stays short enough. --",
            "parent_section": "Why such prominance for Python 3000? ",
            "date_time": " 13:54, 23 February 2006 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "Perl 6, while moving slowly and not yet ready-for-primetime, has seen thousands of hours of development and documentation.  Python 3000 is more a creature of fiction, general idea about what \"might be nice\" at some point in the future.  So it seems unlikely that we could have much of an encyclopedic article on Python 3000 any time soon.  That said, I think Paddy3118's comment still applies: the more we say about Python 3000 in this article, the more wrong the impression is given about its concreteness.  The recently expanded bullet items about it are indeed good in writing clarity, but I worry that adding more words makes the plans seems more definite than they are. ",
            "parent_section": "Why such prominance for Python 3000? ",
            "date_time": " 19:04, 23 February 2006 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "That comparison isn't entirely fair, because in contrast to Perl 6, Python 3000 is definitely not[1] a complete rewrite/redesign.  It's also not nearly that fictional or \"might be nice\" indefinite:  most of the changes are quite concretely slated for the 3.0 release. But anyway, i don't think those things are the point.  As i see it, the encyclopedic significance of \"Python 3000\" does not lie in whether it's a concrete version/release or not (we're not describing any other major feature releases, after all), but rather in that it's one of the more visible examples of Python's idiosyncratically conservative language design approach.  That's not really enough to deserve its own article, but it certainly deserves a solid mention.  --",
            "parent_section": "Why such prominance for Python 3000? ",
            "date_time": " 01:03, 24 February 2006 (UTC)"
        },
        {
            "user": "Gronky",
            "comment": "Just to let you know.  The purpose of featuring an article is both to point readers to the article and to highlight it to potential contributors.  It will remain the feature for a week or so.  The previous feature was Berkeley Software Distribution.  ",
            "parent_section": "On Portal:Free software, Python is currently the featured article ",
            "date_time": " 15:43, 14 March 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "qsort example. I don't understand how it could work. ",
            "date_time": " 07:49, 18 March 2006 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "  Afraid you're mistaken.  Look again.  pivot=L[0].  The stuff before and after the pivot is taken from L[1:].  So somthing that is equal to the pivot will get inserted at top, but pivot itself only goes in once.  If it were not this way, what would happen when you sorted:  [3,3,4,2,2,4,1,1,5,6]? ",
            "parent_section": "qsort example. I don't understand how it could work. ",
            "date_time": " 18:30, 18 March 2006 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "Or empirically:>>> def qsort(L): ...   if L == []: return [] ...   pivot = L[0] ...   return qsort([x for x in L[1:] if x < pivot]) + [pivot] + \\ ...          qsort([y for y in L[1:] if y >= pivot]) ...  >>> l = [3,3,4,2,2,4,1,1,5,6] >>> l2 = [3,3,4,2,2,4,1,1,5,6] >>> l.sort() >>> l [1, 1, 2, 2, 3, 3, 4, 4, 5, 6] >>> ll = qsort(l2) >>> ll [1, 1, 2, 2, 3, 3, 4, 4, 5, 6]  ",
            "parent_section": "qsort example. I don't understand how it could work. ",
            "date_time": " 20:50, 18 March 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "qsort example. I don't understand how it could work. ",
            "date_time": " 09:03, 19 March 2006 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "The article states:  \"Since they are not visually distinguishable (in many tools), mixing spaces and tabs can create bugs that are particularly difficult to find.\" I think this is severely overstating the problem.  Firstly, mixed indentation is only a potential problem if you edit with certain non-standard tab widths, and secondly, even then, all that's required to detect the problem is to run Python with the -t or -tt switches (which turn ambiguous whitespace into a warning and an error, respectively).  In other words, they are trivial to find, and (in most cases) just as easy to automatically fix. --",
            "parent_section": "Ambiguous whitespace \"difficult to find\"? ",
            "date_time": " 18:51, 24 March 2006 (UTC)"
        },
        {
            "user": "Jdavis79",
            "comment": "I think this article overstates several problems that in truth don't occur among programs written in other languages. I think \"simple visual layout\" is subjective, to say the least.  The \"misleading  indention mistake\" is a mistake that, perhaps a first-time user of C would make... writing his first program ;) The statement that immutable strings imply run time efficiency is, in general, not true.  The comment about having \"vast support\" for OOP is essentially useless.  Don't just say \"vast support\", compare and constract with other OOP implementations: ObjC, Smalltalk, C++, etc I also get the feeling from this article that it's primarily interested in conveying the \"greatness\" of python as opposed to facts. --",
            "parent_section": "Problems with this article ",
            "date_time": " 10:45, 9 April 2006 (UTC)"
        },
        {
            "user": "Samohyl Jan",
            "comment": "  Of course, when we start using \"fuzzy\" adjectives, it will always be more or less subjective. But it is also the strength of natural language. Regarding \"layout\", objectively, you would have hard time finding language that has simpler layout (for usual constructs, that is, minimalism in syntax is a different thing). Regarding \"misleading indentation\", Guido certainly wasn't first-time user of C when he started work on Python. Regarding \"vast support for OOP\", it's simply true - Python has everything any common OOP language has (even more, such as multiple inheritance). Anyway, I think that current consensus here is not to compare programming languages with each other in their respective articles, but to point to articles about the each feature, and compare the languages here (because the former means much more redundancy). If you're dissatisfied with my answer, though, what do you suggest to do with the article? ",
            "parent_section": "Problems with this article ",
            "date_time": " 05:32, 10 April 2006 (UTC)"
        },
        {
            "user": "Jdavis79",
            "comment": "The \"vast\" sentence was awkward, and I rewrote it.  The immutable string issue also needed some simplifications: it was too argumentative in both pros and cons; I believe my rephrasing is more plainly factual.  I cannot see anything wrong after reading the description of misleading indentation in C: it's not just that highly experienced C users most certainly make these errors too (or else there wouldn't be an \"obfuscated C contest\", after all)... more importantly, the existing language is quite factual and neutral, unlike ",
            "parent_section": "Problems with this article ",
            "date_time": " 07:18, 10 April 2006 (UTC)"
        },
        {
            "user": "Jdavis79",
            "comment": "It is not neutral ;).  This article speaks of components of the language being \"very useful\", how other features of the language turn a task into a \"surprisingly straightforward and natural process\", and various assertions about the \"strengths\" of python.. blasting the reader with how \"great\" it is.  What's wrong with a simple \"what it does\" layout and let the reader, surprise, decide if the language is great, has particular strengths, etc? Just tell me how to iterate over a list.. just tell me that lists can be sliced.. don't tell me that and then follow it up by telling me how \"awesome\" such a feature is. ",
            "parent_section": "Problems with this article ",
            "date_time": " 13:15, 10 April 2006 (UTC)"
        },
        {
            "user": "Jdavis79",
            "comment": "  I am not able to find the word \"awsome\" in the article.  Nor can I find \"suprisingly straightforward\".    Nor \"great\".  It's hard to respond to criticisms of the article for using phrases that a page search does not show as actually existing.  There was a thread of sense in ",
            "parent_section": "Problems with this article ",
            "date_time": " 15:08, 10 April 2006 (UTC)"
        },
        {
            "user": "Jdavis79",
            "comment": "Is it possible for, say, an article to be hateful without actually containing the word \"hate\" ? That's just an example.  The article does contain references to \"strenghts\", and how features enables tasks to be a \"straightforward and natural process.\"  You're right, it does not contain the word \"awesome\" but I would have thought that experienced editors would always keep one word constantly in mind: tone.  The tone of this article is, I'd estimate, a amalgam of 4/5 factual information and 1/5 following up on how useful, clever, well-thought-out, idiot-proof, ingenious, canny, apt, cunning, yadd yadda yadd, those features are.  Yes, it does not contain any of those words, but again, refer to concept of Tone. Again, just state what the language DOES.  What, exactly, is wrong with this?  Just tell the reader how to do operations, the keywords involved, the history, don't follow it up with a biased tone of how ingenius those features are.  I mean, look at the example of writing quicksort using list comprehensions as being \"elegant.\" And whose opinion is this?  Either get rid of all that superfluous stuff and stick to the NPOV facts or if you must inject that stuff, prefix or postfix it with some kind of warning.. \"Some [language designers|programmers] consider this a useful feature.\"  I mean, a C++ article could have a lame little example of computing an approximation of sqrt(n) using template metaprogramming with no function-call overhead.. all inline.  Now, is that a C++ feature.. YES.  Fact.  Is it fast? clever? clear? straight-forward? useful? elegant?  Opinion, Opinion, Opinion, Opinion, Opinion, Opinion.  Depends on who you ask. ",
            "parent_section": "Problems with this article ",
            "date_time": " 23:15, 10 April 2006 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "  There is a point where slavish neutrality becomes obfuscation. About the Quicksort wording:  what do you find biased?  You should know that the notion of \"elegance\" is (generally) quite widely agreed upon in mathematics and programming, and not nearly as frivolously subjective as you imply.  Sure, the finer points of elegance are always being debated, but i don't think any competent programmer would consider the more conventional C/Java/whatever implementations of Quicksort more \"elegant\" than list comprehension-based implementations in languages like Python or Haskell. Other than that, can you please list the sections that offend? --",
            "parent_section": "Problems with this article ",
            "date_time": " 00:00, 11 April 2006 (UTC)"
        },
        {
            "user": "Jdavis79",
            "comment": "I can't see anything worth addressing in ",
            "parent_section": "Problems with this article ",
            "date_time": " 01:16, 11 April 2006 (UTC)"
        },
        {
            "user": "Jdavis79",
            "comment": "Oh come on.. just because I say \"tell me what the language does\" you infer that I would in fact prefer the article on python to be little more than an enumeration of keywords and a listing of the Backus-Naur formalism for the language grammar?  No.  And, Yes.  The C++ article should have a section on template meta programming. And this is how I would word it.. first, define template meta programming.  Offer a small example.. say computing the approximation of sqrt(n). Stop.  That's it.  Done.  Now, C++ programmers who don't know of this will immediately recognize its value, thinking to themselves, \"hey, there's no function call overhead.  That's useful.\"  See?  The article didn't have to explicitly say, \"One extremely useful paradigm supported by C++ is..\", the particular programmer that read it recognized it immediately as being useful in his toolbox of skills.  Another programmer, say an embedded microcontroller programmer that uses C++ would probably not find such a feature useful because of ever-present space-efficiency constraints. Again.. the reader decided for himself.  And other people, people that don't know any programming whatsoever.. why bother trying to explicitly explain the merits of this particular language feature to them?  they don't know apples from oranges when it comes to that language anyway... send them to C++ for Non-programmers ;) ",
            "parent_section": "Problems with this article ",
            "date_time": " 02:52, 11 April 2006 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "  So in other words, an article section like Generic programming#Templates should definitely not lead with a comment like: \"Templates are of great utility to programmers in C++\"? And it definitely should not continue with something like: \"The C++ Standard Template Library (STL) provides many useful functions within a framework of connected templates.\", or still less \"As the templates in C++ are very expressive they may be used for things other than generic programming.\"Of course, I entirely disagree with criticism of any of these quite encyclopedic descriptions.  I think the editors of the Generic programming article did a nice job (I hadn't read it until now)... as have the editors of the Python article (and likewise for other programming languages, those of which I've read all having analogous tones). ",
            "parent_section": "Problems with this article ",
            "date_time": " 03:44, 11 April 2006 (UTC)"
        },
        {
            "user": "Jdavis79",
            "comment": "Yes, I'd agree that this section needs a bit of tweaking.  For example, it's not an implication that combining templates with multiple inheritance and operator overloading is always a \"win win.\"  At times it can make things worse.  Thus, the article should probably reflect this: It's not a silver bullet.  Also, it should probably say \"The C++ Standard Template Library (STL) provides many commonly used constructs within a framework of connected templates.\"  This conveys the point that is really trying to be made... the fact that the C++ STL has linked lists built in, it has arrays that can grow dynamically built in, it has associative arrays built in.  But the most important fact here is that these constructs, the STL containers as they're called, are not \"hardcoded\" into the language compiler.  No, they're compiled into your program just as if you'd written the code.  Meaning, that if you write your own version of the STL linked list container.. say that is a singly linked list.. rather than a doubly linked list container like the C++ STL std::list<T> container.. the compiler makes no distinction whatsoever between your container the the container that comes bundled with the compiler.  Is that useful? expressive? powerful?  Let the reader decide.  All the article has stated is fact. ",
            "parent_section": "Problems with this article ",
            "date_time": " 04:09, 11 April 2006 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "I think \"can\" is probably OK language, better than simply \"does short circuit\".  It's not optional in the sense of being a language switch or the like... but individual expressions may not be evaluated prior to the final term.  E.g., I would call this a \"short-circuit\":   2==3 and 1+1==2  But I would not call this a short-circuit (since the \"circuit\" needs to complete):  1+1==2 and 2==3  On the other hand, this one may short-circuit, but we don't know until runtime:  foo==bar and 2==3  ",
            "parent_section": "Short circuit metaphor ",
            "date_time": " 03:21, 14 April 2006 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "  As far as i understand it, \"short-circuiting\" refers to whether the language specifies/guarantees minimal evaluation or not; it doesn't have anything to do with whether any particular evaluation is actually smaller (or not) under short-circuiting/minimal evaluation (instead of full evaluation).  In other words, in Python, all the evaluations above are short-circuiting, even though not all of them are actually shorter, as a result. The reason i changed the language is that \"can short-circuit\" suggests that the behavior is not always guaranteed, and that you thus can't rely on it for things like if x in foo and foo[x] == bar: ....  --",
            "parent_section": "Short circuit metaphor ",
            "date_time": " 21:51, 14 April 2006 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "It's fine, I'm not going to change the words you put in.  But the circuit metaphor suggests something fairly specific, which is an actual reduction of evaluation path, not just potential reduction for boolean operators.  \"Minimal evaluation\" or \"lazy evaluation\" might be more precise terms, since they aren't quite so subject to the specific image/metaphor. ",
            "parent_section": "Short circuit metaphor ",
            "date_time": " 00:42, 15 April 2006 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "I don't know;  this is the first time i've seen \"short-circuit\" considered to suggest anything but minimal evaluation (potential evaluation reduction) in general.  The term has always reminded me of \"short-cut\", which (to me) clearly implies only potential reduction (if, instead, it was always available, it would be the standard method, not a short-cut :).  --",
            "parent_section": "Short circuit metaphor ",
            "date_time": " 01:58, 15 April 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Short circuit metaphor ",
            "date_time": " 01:51, 15 April 2006 (UTC)"
        },
        {
            "user": "Fubar Obfusco",
            "comment": "I don't know offhand whether K&R used the term, nor whether that was the first usage.  But as well as the metaphor being fairly clear about excluding cases where no \"circuit\" is actually \"shorted\", it seems like a majority of technical uses I can find in a web search favor the more literal reading of the metaphor.  A language feature, then, is \"potential short-circuiting\" (or the latest edit about \"short-circuit semantics\").  For example:  Short circuit evaluation refers to the condition where an expression is no longer evaluated since further evaluation cannot change the value of the expression.[2]Opportunities for short-circuit evalution are apparent from the truth tables...[3]A short-circuit evaluation of an expression is one in which the result is determined without evaluating all of the operands and/or operators.[4](P.S. To ",
            "parent_section": "Short circuit metaphor ",
            "date_time": " 02:41, 15 April 2006 (UTC)"
        },
        {
            "user": "Cadr",
            "comment": "  To my knowledge, as Fubar Obfusco has said, short circuiting always refers to the lazy evaluation of operators such as || in C. No expression of the form (X && Y), or in Python (X and Y), can be said to short circuit, because both X and Y must be fully evaluated in order to determine the truth of the entire expression. (Of course, if X and Y are complex expressions, they may themselves contain some operators which induce short-circuiting.) ",
            "parent_section": "Short circuit metaphor ",
            "date_time": " 15:41, 15 April 2006 (UTC)"
        },
        {
            "user": "Fubar Obfusco",
            "comment": "No, no.  Clearly short-circuiting can apply to the Python 'and' operator.  The only question we're discussing is exactly what the scope and usage of the term \"short-circuit\" is.  I argue both that most people do (as quoted), and that one generally should (because unfamiliar readers will), read the metaphor fairly flat-footedly.  An example for 'and':>>> def F(): ...     print \"False\" ...     return False ...  >>> def T(): ...     print \"True\" ...     return True ...  >>> if F() and T(): ...     print \"Truth is untruth\" ...  False >>> if T() and F(): ...     print \"Truth is untruth\" ...  True False  As I read the term, the first 'if' test short-circuited, but the second 'if' did not have the opportunity to do so (but we didn't know that until runtime).  I am 100% in agreeement with ",
            "parent_section": "Short circuit metaphor ",
            "date_time": " 16:01, 15 April 2006 (UTC)"
        },
        {
            "user": "Cadr",
            "comment": "Yes, sorry, I was forgetting that 'and' could shortcircuit if the first operand is false. So I guess we are all in agreement, actually? ",
            "parent_section": "Short circuit metaphor ",
            "date_time": " 16:17, 15 April 2006 (UTC)"
        },
        {
            "user": "Chrismith",
            "comment": "The article claims python supports Design by contract. The \"Design by contract\" article itself however only lists two external packages for python which are not part of the standard lib. I cannot see any native DbC support in python 2 either.  Article changed to reflect the fact that design by contract is supported through extensions to the langauge. --",
            "parent_section": "Design by contract ",
            "date_time": " 20:42, 22 April 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Removal of Perl/Ruby in See also section? ",
            "date_time": " 21:03, 1 May 2006 (UTC)"
        },
        {
            "user": "-Barry-",
            "comment": "  Some people objected to me adding a list of popular alternatives to Perl in the Perl article, so I wanted to be consistant in this article.Feel free to add your dynamic languages link. I just added a link to Comparison of programming languages, which I just fixed up and will fix up further eventually. ",
            "parent_section": "Removal of Perl/Ruby in See also section? ",
            "date_time": " 00:54, 2 May 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Decorators? ",
            "date_time": " 20:34, 22 May 2006 (UTC)"
        },
        {
            "user": "Sam Pointon",
            "comment": "  A discussion on decorators would probably be a little much for this article. However, the syntax section is getting a little long anyway - Python syntax, analogous to C syntax would have a place for an explanation about decorators. We'd leave a vastly trimmed-down version of what's there right now (indentation, statements, fundamental datatypes, interesting expressions (lambda, listcomps, etc) (maybe)). I've seen this proposed above once or twice, but I feel if we add any more syntactical nuances to the article it will be stretched too far, so the time is opportune. --",
            "parent_section": "Decorators? ",
            "date_time": " 20:42, 22 May 2006 (UTC)"
        },
        {
            "user": "Sam Pointon",
            "comment": "I like that proposal.  Want to start it, ",
            "parent_section": "Decorators? ",
            "date_time": " 21:06, 22 May 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Decorators? ",
            "date_time": " 21:18, 22 May 2006 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "Good going!  --",
            "parent_section": "Decorators? ",
            "date_time": " 10:26, 23 May 2006 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "If there are no objections, i would like to merge Python 3 into this article.  Could interested users please take a look at Talk:Python 3?  --",
            "parent_section": "Proposed Python 3 article merge ",
            "date_time": " 22:30, 5 June 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Proposed Python 3 article merge ",
            "date_time": " 02:01, 6 June 2006 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "In case other readers are interested: I responded to your concerns over there, and tried to explain my motivation a bit better.  --",
            "parent_section": "Proposed Python 3 article merge ",
            "date_time": " 10:42, 6 June 2006 (UTC)"
        },
        {
            "user": "Maxerickson",
            "comment": "In paragraph two of the philosophy section, the phrase \"exuberant syntax\" is uttered. This betrays, at least, a poor understanding of the word exuberant. Exuberant has very strong emotional connotations; Perl syntax does not run joyfully down a line of text. I don't really see how to get rid of it, but something like  \"Python often provides features as built-in functions and extension modules rather than as additional syntax.\" seems, to me, to be an improvement. Also, IMHO(In my hostile opinion, in this case) in the preceding paragraph, \"multi-paradigm language\" verges on idiot speak. It appears to pervade the programming entries on wikipedia, so I again choose not to edit the actual entry, but \"Python supports (list of 4 programming styles). Extensions like|such as|whatever pyDBC and Contracts for Python provide support for Design by Contract.\" is a pretty good replacement for the first several sentences of that paragraph. In the python box, the paradigm: multi-paradigm is especially rich. It provides no information what-so-ever. \u2014Preceding unsigned comment added by ",
            "parent_section": "Exuberant?? and other strange philosophy. ",
            "date_time": " 01:54, 12 June 2006 (UTC)"
        },
        {
            "user": "Maxerickson",
            "comment": "If exuberant is used in the perl community, great. That doesn't really help it make any sense to somebody who has no sense of the perl community. It also means that it probably doesn't belong in a wikipedia article meant to inform about python.The multi-paradigm stuff: I have no interest in swimming up hill; I prefer to just let the whole world be wrong. That said, it makes the article wordier without making it more informative. If my list is awkward, it probably shouldn't comprise the majority of that paragraph. I also disagree that a catch-all is in any way \"precise\".I would love a pointer to 'multi-paradigm' on python.org. The first twenty hits on google for \"site:python.org multi-paradigm\" are mailing list archives. Getting rid of the dash doesn't help.Sorry about not signing that last post...",
            "parent_section": "Exuberant?? and other strange philosophy. ",
            "date_time": " 00:55, 13 June 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Exuberant?? and other strange philosophy. ",
            "date_time": " 01:10, 13 June 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Exuberant?? and other strange philosophy. ",
            "date_time": " 01:13, 13 June 2006 (UTC)"
        },
        {
            "user": "Maxerickson",
            "comment": "To clarify, it is idiot-speak because idiots have stripped paradigm of most of its value, not for some intrinsic reason. I've read some of your book and liked what I read(I've seen you post in c.l.python under Lulu... but didn't make the connection until you mentioned writing a book and clicked your user page link), even when it was over my head. The general thrust of my initial complaint is that using multi-paradigm anywhere in the entry requires explaining it somewhere in the entry, but doesn't really make the entry a great deal more informative. It stands up without ever mentioning paradigm at all. It also makes less sense as a philosophy section then, which I hadn't really thought about. Hmmm.",
            "parent_section": "Exuberant?? and other strange philosophy. ",
            "date_time": " 01:49, 13 June 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Exuberant?? and other strange philosophy. ",
            "date_time": " 02:37, 13 June 2006 (UTC)"
        },
        {
            "user": "64.132.237.49",
            "comment": "IMO we need a disambig. page for the animal and the programming language. -- scott \u2014Preceding unsigned comment added by ",
            "parent_section": "Proposal for Disambiguation ",
            "date_time": " 16:41, 19 June 2006 (UTC)"
        },
        {
            "user": "Zukeeper",
            "comment": "I am planning to remove a bunch of links from the External Links section based on Wikipedia's policy on External links (see External links). I don't want to remove all links, but I feel that the external links section is quite bloated and I would like to see it slimmed down a bit; Wikipedia is not meant to be a collection of outside links. In particular, I feel that links easily accessed from the python.org site do not need to be here. Similarly, links to python-related topics that may not be of general interest should be removed (I'm looking at you, \"Python for Series 60 \u2014 Resources for developing in Python on the Nokia Series 60 mobile platform\"). If you have a strong feeling about why a particular link should or should not be included, speak now. Please refer to the Wikipedia policy on external links in your arguments. ",
            "parent_section": "Advance notice: I am planning on editing the External Links section ",
            "date_time": " 01:58, 13 July 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Advance notice: I am planning on editing the External Links section ",
            "date_time": " 02:55, 13 July 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Commercial linkspam ",
            "date_time": " 02:05, 18 August 2006 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "  For what it's worth, the relevant policy guide is over here:  Wikipedia:External links.  --",
            "parent_section": "Commercial linkspam ",
            "date_time": " 13:34, 19 August 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Calling Python slow? ",
            "date_time": " 02:30, 27 August 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Calling Python slow? ",
            "date_time": " 04:26, 30 August 2006 (UTC)"
        },
        {
            "user": "Kris Schnee",
            "comment": "My thinking behind the \"Speed\" section was that since people seem to criticize Python because of it, it's worth mentioning that that is a criticism, and the fact that there are methods of dealing with it. Could it be reworded to remove the \"advocacy\" aspect? As for the \"original research,\" I don't know how that would be dealt with other than finding some Impressive Authority that accuses Python of slowness. Is it better to omit the issue entirely, or find some way of saying \"this is kind of a problem but Python fans say it's not major?\" --",
            "parent_section": "Calling Python slow? ",
            "date_time": " 19:59, 5 September 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Calling Python slow? ",
            "date_time": " 20:02, 5 September 2006 (UTC)"
        },
        {
            "user": "216.41.15.170",
            "comment": " The currently live quote marked as needing a citation \"Speed is not a problem until it is a problem\" should go.  While I like the sentiment I've never seen that particular quote on comp.lang.python or python-dev.  A search of google, groups.google, and gmane.org turns up squat.  Jack Diederich, Jan 10 17:58:03 EST 2007 \u2014The preceding unsigned comment was added by ",
            "parent_section": "Calling Python slow? ",
            "date_time": " 22:57, 10 January 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Distinction between \"language\" and \"implementation\" ",
            "date_time": " 04:31, 30 August 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Distinction between \"language\" and \"implementation\" ",
            "date_time": " 04:48, 30 August 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Distinction between \"language\" and \"implementation\" ",
            "date_time": " 04:52, 30 August 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Distinction between \"language\" and \"implementation\" ",
            "date_time": " 05:08, 30 August 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Distinction between \"language\" and \"implementation\" ",
            "date_time": " 05:29, 30 August 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Distinction between \"language\" and \"implementation\" ",
            "date_time": " 05:39, 30 August 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Distinction between \"language\" and \"implementation\" ",
            "date_time": " 00:12, 31 August 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Distinction between \"language\" and \"implementation\" ",
            "date_time": " 00:42, 31 August 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Distinction between \"language\" and \"implementation\" ",
            "date_time": " 23:02, 30 August 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Requested move ",
            "date_time": " 22:27, 1 September 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Ahead of the curve ",
            "date_time": " 15:18, 5 September 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Ahead of the curve ",
            "date_time": " 10:32, 1 October 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Re-addressing the notion of a criticism section ",
            "date_time": " 10:48, 1 October 2006 (UTC)"
        },
        {
            "user": "88.110.89.171",
            "comment": "  Unfortunately, it is difficult to do a criticism section properly (ie, without violating NPOV). The entire speed issue is, actually, a CPython specific one, but because that is the major Python implementation, people associate slowness with Python. A note to the effect of 'this article discusses the abstract idea of the Python language; see X, Y and Z for details of the common implementation' at appropriate places, combined with suitable expansion of CPython, may be a good idea.However, this does not work as well for the abstract criticisms (and praise, like ESR's article). I agree that notable studies and articles discussing this should get a mention somewhere, but I don't want to see every Tom, Dick and Harry's attack on Python feature X being noted in the article. Perhaps a list of notable commentaries on Python can be compiled and we can work from there?I have started on the path to all of these, by expanding 'Usage' into a more general response section per the original suggestor's suggestion. The current title (\"Response and effects\") is far from ideal; I welcome a more fitting name. --",
            "parent_section": "Re-addressing the notion of a criticism section ",
            "date_time": " 21:41, 5 October 2006 (UTC)"
        },
        {
            "user": "GrayAlien",
            "comment": "If you are writing code for a windows server make sure you upload your code in 'Binary' and it goes without saying if your write the code for a Linux server uploaded your code in 'Ascii'. First line in your code for CGI Windows Severs:  #!c:\\python\\python.exe  Linux Servers:  #!/usr/bin/python  Python 2.3  #!/usr/bin/python2.3  Python 2.4  #!/usr/bin/python2.4  ",
            "parent_section": "CGI Quick Note ",
            "date_time": " 02:21, 21 December 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "CGI Quick Note ",
            "date_time": " 04:00, 21 December 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "emphasizes programmer effort over computer effort ",
            "date_time": " 00:02, 22 December 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "emphasizes programmer effort over computer effort ",
            "date_time": " 02:56, 22 December 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "emphasizes programmer effort over computer effort ",
            "date_time": " 03:23, 22 December 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "emphasizes programmer effort over computer effort ",
            "date_time": " 08:53, 22 December 2006 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python Humor ",
            "date_time": " 17:08, 5 January 2007 (UTC)"
        },
        {
            "user": "Silverfish",
            "comment": "In the Python 1 section, there is the sentence \"CNRI and the FSF interacted to develop enabling wording changes to the Python's free software license that would make it GPL-compatible.\". The \"develop enabling wording changes\" bit seems oddly worded. It seems that \"enabling\" is redundant, but I'd like confirmation, or some indication of enabling means in this context if not. ",
            "parent_section": "Odd Wording ",
            "date_time": " 10:52, 9 January 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Odd Wording ",
            "date_time": " 20:41, 9 January 2007 (UTC)"
        },
        {
            "user": "Silverfish",
            "comment": "I've delved a bit further, and it looks like the wording (as well as some other content in this article, is taken from the Python 2.0.1 license [2] (and subsequence licenses, the same or similar wording is in the Python 2.5 License). ",
            "parent_section": "Odd Wording ",
            "date_time": " 00:18, 10 January 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Influences by ",
            "date_time": " 06:03, 14 January 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Influences by ",
            "date_time": " 05:51, 14 January 2007 (UTC)"
        },
        {
            "user": "Abednigo",
            "comment": "  I think that the list might be a little bit oversealous in attributing influence to languages. Let me go through them and mark the ones I think are slightly dubious and give rationale to the ones I think not:ABC: Fairly obvious - Guido designed Python to replace ABC, taking the indentation from it, amongst other things C: Procedural language, like Python. Maybe a little questionable, but I don't think anyone could say that any languages since 1980 haven't been influenced even slightly by C. Haskell: Directly influenced Python's list comprehension syntax. Icon: Generators. Lisp: Has influenced Python's functional capacities, including getting map, filter and lambdas into Python. Modula-3: Exception handling? In any case, the object system and module system are definitely originally from here. Perl: Maybe as an example of 'what Python shouldn't be'. Have any features actually been lifted from here? Smalltalk: It's object-oriented, so's Python. Tcl: I have no idea why this is here, besides Tkinter, but that's a library and not really part of the core language features. Java: Several syntaxes have been taken from Java (unified try-except-finally, pie-decorators).Two or three could stand to be removed. Perl and tcl have the weakest cases, with no direct influence on the core language that I know about. ",
            "parent_section": "Influences by ",
            "date_time": " 02:10, 15 January 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Influences by ",
            "date_time": " 15:47, 15 January 2007 (UTC)"
        },
        {
            "user": "Chrike",
            "comment": "While python does indeed come with \"batteries included\", the image Python_batteries_included.jpg doesn't really communicate anything and looks somewhat amateur. That image, which was originally on www.python.org, is no longer displayed there (at least I couldn't find it). I propose that we also remove the image from this page. Comments?   ",
            "parent_section": "Image: Python comes with \"batteries included\" ",
            "date_time": " 03:58, 26 January 2007 (UTC)"
        },
        {
            "user": "Debolaz",
            "comment": "How is PEP a unique aspect of Python? As far as I know, many communities has similar processes. It's already described elsewhere in the article, so perhaps it should be removed from that particular section? ",
            "parent_section": "PEP ",
            "date_time": " 21:20, 27 January 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "PEP ",
            "date_time": " 22:53, 27 January 2007 (UTC)"
        },
        {
            "user": "88.111.227.171",
            "comment": "I believe that PEPs influenced tcl's community to do something similar (TEPs?), so, perversely, a mention may now be appropriate under the new header namings. ",
            "parent_section": "PEP ",
            "date_time": " 15:35, 28 January 2007 (UTC)"
        },
        {
            "user": "Debolaz",
            "comment": "I would be ok with that. ",
            "parent_section": "PEP ",
            "date_time": " 23:00, 28 January 2007 (UTC)"
        },
        {
            "user": "Lulu of the Lotus-Eaters",
            "comment": "An anon editor added a bunch of material on the history of Python.  It all seems accurate and well written.  But the overall result is an article that looks very unbalanced, with much more verbiage devoted to the minutia of versions than to any other topic.  The gestalt, philosophy, usage, etc. really seem much more important for readers who wonder \"so what is this Python thing\" than does the year-by-year history. I'm not sure what the best approach is.  Maybe another spin off child article that could have all this detail.  Or maybe some way of moving this detail closer to the bottom of the current article.  What do editors think? \u2014The preceding unsigned comment was added by ",
            "parent_section": "History unbalanced ",
            "date_time": " 02:04, 1 February 2007 (UTC)"
        },
        {
            "user": "88.111.238.99",
            "comment": ".  Speaking as the anonymous editor who added most of the recent content to the History section, I don't think the imbalance in the article is too bad, or bad enough to warrant taking major action over it. When I was looking over each version's release notes, I was consciously trying to pick out the major details, especially where other languages have influenced Python. Ideally, I would also have added a paragraph or two about, at the very least, how 1.5.2 was, for a while, the most widely delpoyed Python version (this crown seems to have been taken by 2.3 now, though 1.5.2 still has quite some userbase), but I just couldn't find the sources for this.Given the current set of sources we have to work with, I don't think it's surprising that there's a leaning towards birds-eye overviews (there are so many of these, I can't begin to count them all), and the miniutae of each release (which is supplied in admirable detail by Misc/HISTORY and Misc/NEWS. However, the article does have a fairly meaty philosophy section, as well as a nice lede, so I don't think it's worth getting too worried about for now.Maybe once I've finished trawling the release notes, there will be a slight problem in the balance department, requiring splitting, but no promises yet ;) ",
            "parent_section": "History unbalanced ",
            "date_time": " 16:40, 1 February 2007 (UTC)"
        },
        {
            "user": "NoClutter",
            "comment": "This is not about the article itself, so to keep in line with wikipedia policy, I posted the question here instead. If anyone is watching this, pls help if you can. pls don't bite the noob. Thanks. ",
            "parent_section": "avoiding naming collisions ",
            "date_time": " 17:39, 28 February 2007 (UTC)"
        },
        {
            "user": "88.111.218.237",
            "comment": "At the moment, the article uses a hodge-podge if -ise and -ize spellings. This should be made consistent. The question is, which way? Python's style guides don't specify, and it's used on both sides of the Atlantic. So it seems to depend on which editor actually does the task. If I do it, I will move towards -ise spellings, but I will not complain if someone goes ahead and makes it all use -ize before I do this. I'll do it tomorrow, providing no-one beats me to the punch or provides a strong argument otherwise. ",
            "parent_section": "Spelling ",
            "date_time": " 21:07, 16 March 2007 (UTC)"
        },
        {
            "user": "88.111.218.237",
            "comment": "  Also, it's Random Useless Statistic Time: there are 3 genuine -ize/ization/izing words, versus 7 genuine -ise/isation/ising words in the current version. Make of that what you will. ",
            "parent_section": "Spelling ",
            "date_time": " 21:21, 16 March 2007 (UTC)"
        },
        {
            "user": "Miles",
            "comment": "Yes, but four of those are variants of \"optimise\" in a single paragraph, and there are two -ized/izes words you may have missed :p. FWIW, the Python documentation heavily prefers American spellings, except for a few modules in the standard library. But I don't feel strongly about it. \u2014 ",
            "parent_section": "Spelling ",
            "date_time": " 02:13, 17 March 2007 (UTC)"
        },
        {
            "user": "Abednigo",
            "comment": "Unfortunately, it is not only low screen resolutions affected by this. If I were to try to print this article with two columns of references with full-size text (hey, reading a too-small printout is awful!), with some only marginally longer than average URLs, they bleed into the next column too. (On Firefox at least, this can be simulated by clicking the 'Printable version' link in the toolbox, and selecting File -> Print preview. At 100% text size, it happens on several URLs, and even at 70% (which, IMHO, is about the minimum size that's actually usable for me), there's one link that spills over.) Seeing as this has been changed twice in the past few days, I'm taking this to talk to solicit feedback and rationales. Ideally, there'd be some magical template that can detect the screen width being used, and automatically compute the width needed for its reference list, but as far as I know there's no such thing. ",
            "parent_section": "<references /> columns ",
            "date_time": " 16:02, 29 March 2007 (UTC)"
        },
        {
            "user": "71.197.217.229",
            "comment": "I think the two should be cross referenced (each link the other) and have the main page perhaps mention other language implementations.  ...or perhaps have translations in various languages.  But if there be too much content, the folks won't read.  The article is already long and mentioning every possible fact has to be balanced against the possibility of loosing readers.  Mention, cross link, but do not merge.  ...my opinion.  Larry ",
            "parent_section": "Merging ",
            "date_time": " 08:48, 15 April 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Merging ",
            "date_time": " 10:30, 1 May 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Thoughts on reference ",
            "date_time": " 15:31, 8 May 2007 (UTC)"
        },
        {
            "user": "AdamGomaa",
            "comment": "  Even worse, the link is now dead. I've removed it. --",
            "parent_section": "Thoughts on reference ",
            "date_time": " 11:41, 6 July 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "List of IDEs (where?) ",
            "date_time": " 15:09, 29 May 2007 (UTC)"
        },
        {
            "user": "89.61.123.52",
            "comment": "Dabo PythonCard Kexi Rekall Gemello Kiwi/Gazpacho TinyERP GNUe BoaConstructor UliPad Some more:  SPE IDLE (most important, since bundled with Python) Eric Kate, Vim, Emacs, Notepad++, KDevelop are the other editors that I used and have some python supportWhen we are at it, if we add the list to the article (and I hope we will), we should definitely mention that a lot of Python developers (me at least) use a normal text editor (maybe with some extra features like auto-indentation and syntax highlighting), run their code and other tools (version control, for example) via command line and use the interactive python shell (or, IPython, the enhanced frontend) for discovering (Code completion!) and testing (interactive, right?) commands. --",
            "parent_section": "Python IDEs and GUI Builders ",
            "date_time": " 17:26, 30 December 2007 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "Can we add Groovy to the list? \u2014Preceding unsigned comment added by 91.148.97.24 (talk)   Certainly (and done):  the article already mentions it.  --",
            "parent_section": "Influenced: ",
            "date_time": " 20:25, 11 June 2007 (UTC)"
        },
        {
            "user": "F\u0131rat K\u00dc\u00c7\u00dcK",
            "comment": "Like Perl and PHP. Python is an aimperative programming languge. So we should add it to the imperative languages Category ? --- ",
            "parent_section": "Python is an imperative programmin language? ",
            "date_time": " 11:44, 8 July 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Shed Skin ",
            "date_time": " 05:18, 9 July 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "\"Limited functional\" ",
            "date_time": " 18:09, 20 July 2007 (UTC)"
        },
        {
            "user": "79.72.86.95",
            "comment": "  Please note that the previous version called it \"multi-expression anonymous closures\", which Python does not support. lambdas are only a single statement (which is how the article probably should read). There is no way to encode, eg:def foo():     if bar:         while baz:             qux()     else:         try:             spam()         finally:             eggs()  using a single lambda (or if there is, it's too hacky to even contemplate).  \u2014Preceding unsigned comment added by ",
            "parent_section": "\"Limited functional\" ",
            "date_time": " 20:55, 20 July 2007 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "Agreed;  the details are finicky and particular, and don't improve the paragraph.  I think \"offers limited support for functional programming [...]\" is a sufficient summarization for the context.  \u2014",
            "parent_section": "\"Limited functional\" ",
            "date_time": " 02:07, 21 July 2007 (UTC)"
        },
        {
            "user": "76.87.74.5",
            "comment": "I disagree with the assertion that \"the fact it's so relatively simple to do makes the point correct in only the most contorted and pedantic sense.\"  At least in the sense that recursion is, IMO, a major part of functional programming.  I'm sure the example you noted could be used to write primitives for higher order functions, but it isn't very elegant.  I may be misunderstaning your point, but I could just as easily argue that Scheme has support for objects, because 1% of the users wrote object systems.  (actually I think this argument is more convincing because object systems don't require any major implementation/compiler changes).  I use functional programming in a perl proejct, though with great tedium, and I don't see how it would be substantially different in python.I was not the person who wrote the subject statement though, keep in mind.  \u2014Preceding unsigned comment added by ",
            "parent_section": "\"Limited functional\" ",
            "date_time": " 23:34, 21 May 2008 (UTC)"
        },
        {
            "user": "Wam067",
            "comment": "Some programming language articles have a Strengths vs Weaknesses or Criticisim Topic which I think many readers find helpful in comparing different languages and understanding why one language is better than another for a particular application or program implementation.  I realize this might be a sensitive issue but think the added content would be helpful.  ",
            "parent_section": "No Strengths vs Weaknesses or Criticisim Topic ",
            "date_time": " 07:30, 25 July 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "No Strengths vs Weaknesses or Criticisim Topic ",
            "date_time": " 08:17, 25 July 2007 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "Criticism is fine, as long as it is balanced, not original research, and attributable to a reliable source:  you can't go and write down your own opinions.  \u2014",
            "parent_section": "No Strengths vs Weaknesses or Criticisim Topic ",
            "date_time": " 13:53, 25 July 2007 (UTC)"
        },
        {
            "user": "Reb42",
            "comment": "Nowhere in the executive summary is Python said to value readability at the expense of speed or expressiveness. I assume the original author of that sentence considered the summary to have inferred such a philosophy, which is not factually supported. Changing this about a bit. ",
            "parent_section": "Readability vs. Speed and Expressiveness ",
            "date_time": " 05:53, 28 July 2007 (UTC)"
        },
        {
            "user": "Piet Delport",
            "comment": "Any interested editors, please see Talk:Python 3:  i'm looking for consensus on what to do with that article.  \u2014",
            "parent_section": "Python 3 article merge ",
            "date_time": " 05:00, 29 July 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Better code example? ",
            "date_time": " 21:45, 17 August 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Better code example? ",
            "date_time": " 21:50, 17 August 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Better code example? ",
            "date_time": " 00:50, 18 August 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Better code example? ",
            "date_time": " 01:01, 18 August 2007 (UTC)"
        },
        {
            "user": "Mykhal",
            "comment": "I would also vote for providing more \"pythonic\" code, the current one (add5) even does not follow python coding standards. ",
            "parent_section": "Better code example? ",
            "date_time": " 20:40, 13 September 2007 (UTC)"
        },
        {
            "user": "Mykhal",
            "comment": " .. maybe the code could use the default ID(L)E highlighting. What about something like this http://img187.imageshack.us/img187/3213/wikipythonexample1yi9.png ? .. I know I could use the with statement, but that could be somewhat confusing ",
            "parent_section": "Better code example? ",
            "date_time": " 11:46, 8 November 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Better code example? ",
            "date_time": " 20:03, 8 November 2007 (UTC)"
        },
        {
            "user": "Mykhal",
            "comment": "The copyright is for now all rights reserved :) - it's just a proposal. here is the updated version (note that in there was a bug) with the larger font. ",
            "parent_section": "Better code example? ",
            "date_time": " 22:32, 8 November 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Better code example? ",
            "date_time": " 04:27, 9 November 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Better code example? ",
            "date_time": " 05:49, 9 November 2007 (UTC)"
        },
        {
            "user": "Mykhal",
            "comment": "I think there should be some more discussion, my code is not absolutely OK, because I do not close the file explicitly.  I think the final code should be short, using good programming practices, and exposing several nice python features/syntax. The final image/svg then may would look nicer using some light on dark scheme, like this.. Here it is in text format: ",
            "parent_section": "Better code example? ",
            "date_time": " 11:51, 9 November 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Bare references ",
            "date_time": " 02:50, 19 August 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Too much bibliography ",
            "date_time": " 07:32, 3 September 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Too much bibliography ",
            "date_time": " 08:16, 3 September 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Too much bibliography ",
            "date_time": " 19:14, 3 September 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Afd on Python philosophy ",
            "date_time": " 05:39, 16 October 2007 (UTC)"
        },
        {
            "user": "79.75.188.124",
            "comment": "I just removed the very recently added Criticism section from the article. I'm putting it here, in the hope that we can distil some useful additions to the article. Point:  Python OO is often considered non-native to the language by OO purists as class member functions force the user to have self as its first parameter, in a similar way to Perl. Also, instance variables within a member function also need to be accessed always through self, leading to much more verbose (and often hard to read) code. Other OO languages such as C++, D, Ruby, etc. consider self implicit, force the use of accessors or use sigils for this.Response: A discussion of Python's treatment of 'self' is already in the article, in more NPOV terms. Redundant. Point:  Python was originally born as an OO language where its built-in classes could not be modified. While much of this problem was addressed in 2.2, most of the standard library has not been updated to try to take advantage of this. Modification of built-in classes within the Python community is still perceived as dangerous.Response: Discussed in the History section, though not in as much depth (of opinion as well as of detail). Perhaps could be worked in there. Point:  Lack of native regular expressions syntax like Perl or Ruby forces code involving them to be more verbose than in those languages.Reponse: A criticism of the standard library, not of the language itself. If there is a solid reference for this, it should be but in the 'Philosophy' section, after the part about Python's core-language minimalism. Point:  Use of indentation is often a problem when sharing code through Internet forms or other methods that do not respect indentation. Even cutting and pasting code from other python sources where the tabulation level is different can often require careful editing to avoid syntax or subtle logic errors.Reponse: Covered in depth both in this article and in Python syntax. Redundant. Point:  Use of indentation and the need to use modules for several basic operations makes Python often not that well suited for one-liners as sed, awk, Ruby or Perl are for system administrators.Response: See above, though I don't think this is mentioned explicitly. This is a fair point, so perhaps should be added to Python syntax. Actually, isn't there something about Python golf, and how it specifically doesn't work, already? Point:  Tuples are often considered an unneeded addition to the language as lists provide a similar functionality. Alternatively, the immutability of tuples not being available to other primitives is also perceived as an inconsistency in the language.Response: Infested with weasel words. Stripped of these, the argument is: \"Tuples are just immutable lists and thus not needed. Their immutability is inconsistant with other built-in types.\" The first part is sometimes brought up on c.l.py, and is sometimes dispatched by Pythonistas using arguments such as tuples not being lists, but being records (a la Pascal); and lists being unsuitable for use as dictionary keys. A mention (again in Python syntax) of this could be good. The latter part is simply wrong (cf str, frozenset). But, without cites, all this is moot. I don't have the time right now to cite any of the potentially valid addendums I've just rooted out, so I'm leaving them here for an interested editor to quest for. ",
            "parent_section": "Criticism, redux ",
            "date_time": " 17:02, 9 November 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Criticism, redux ",
            "date_time": " 17:45, 9 November 2007 (UTC)"
        },
        {
            "user": "Het",
            "comment": "Point:  Methods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self in some other object-oriented programming languages (for example, Java, C++ or Ruby).Response: This is not really true of Ruby. Instance attributes in Ruby must be accessed with a special scoping sigil and can not be accessed with a self. Instance methods may be accessed without an explicit self but only those that are already defined and not the ones that will be defined at some future point in time (and meta programming is often used in Ruby so the explicit self become necessary). None of this is relevant to a discussion about Python so keeping Ruby as an example only leads to missinformation. I'll be removing it unless someone can see a reason it has to stay.  \u2014Preceding unsigned comment added by ",
            "parent_section": "Criticism, redux ",
            "date_time": " 05:43, 30 January 2008 (UTC)"
        },
        {
            "user": "Philopedia",
            "comment": "A long article. The work that went it to it is evident. Commendable! So please take my criticism to heart without losing heart.   As with many expert type articles, this articles suffers from an overly narrow view of its customers. One almost gets the idea it is written exclusively for the same group of enthusiasts as are doing the writing! The article would certainly benefit by a step back from this notion of the readership. For instance, the target readership should be expanded to include (at least) people with experience programming in any other language, but explicitly lacking Python background.  A simple example to show what I mean: Right at the start, I'd like to see an answer to the question \"Why Python?\", i.e., what types of applications Python is especially designed to handle, and why it is better at these problems than other languages. (This information would be much more relevant to the stranger to Python than, for instance, cute anecdotes about a founder nominating himself as dictator for life.) In the same context, I'd also expect guidance as to what type of problems Python is not well adapted to dealing with (that is, less well adapted than other languages). Together, these define the relevant user group.  ",
            "parent_section": "Typical Tunnel Vision Problem ",
            "date_time": " 17:05, 16 November 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Typical Tunnel Vision Problem ",
            "date_time": " 19:25, 16 November 2007 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Wikimedia Python Examples? ",
            "date_time": " 07:34, 8 December 2007 (UTC)"
        },
        {
            "user": "C1932",
            "comment": "I edited the line in the intro that said \"Python...emphasizes the importance of programmer effort over computer effort.\" I understand what this is trying to say, but it's ambiguous short-hand programmer-speak. A newbie could even interpret it as meaning that Python emphasizes that it's important for programmers to put in more effort. See what I mean? The tradeoff with execution time may be relevant, but doesn't need to be in the intro. ",
            "parent_section": "Modified the intro a bit ",
            "date_time": " 04:46, 24 January 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Modified the intro a bit ",
            "date_time": " 10:20, 24 January 2008 (UTC)"
        },
        {
            "user": "139.91.179.210",
            "comment": "Hello everyone, I hope not to disturb your work, but here is a small curiosity: I just did a search for Python and got to the disambiguation page, where it says:   Python (mythology), the oracular serpent of Delphi  While on the Borland Delphi-page is stated about the name of the programming language:   \"If you want to talk to [the] Oracle, go to Delphi\"  ..I'm confused! ;)  ",
            "parent_section": "Python (mythology), the oracular serpent of Delphi (pun intended?) ",
            "date_time": " 18:55, 31 January 2008 (UTC)"
        },
        {
            "user": "Lambiam",
            "comment": "  It is a coincidence. The name of the Python language comes from Monty Python's Flying Circus and has nothing to do with nasty reptiles.[1]  --",
            "parent_section": "Python (mythology), the oracular serpent of Delphi (pun intended?) ",
            "date_time": " 06:54, 1 February 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python (mythology), the oracular serpent of Delphi (pun intended?) ",
            "date_time": " 16:20, 1 February 2008 (UTC)"
        },
        {
            "user": "Lambiam",
            "comment": "The association is after-the-fact; the name of the language is older than any of these.[2] The keywords \"Spanish Inquisition\" and \"SPAM\" should tell you something. The first O'Reilly book with a snake on the cover is from 2003.  --",
            "parent_section": "Python (mythology), the oracular serpent of Delphi (pun intended?) ",
            "date_time": " 03:30, 2 February 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python (mythology), the oracular serpent of Delphi (pun intended?) ",
            "date_time": " 04:11, 4 February 2008 (UTC)"
        },
        {
            "user": "Lambiam",
            "comment": "What makes you think this quote is relevant to the issue of where the name of the programming language came from?  --",
            "parent_section": "Python (mythology), the oracular serpent of Delphi (pun intended?) ",
            "date_time": " 10:21, 4 February 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python (mythology), the oracular serpent of Delphi (pun intended?) ",
            "date_time": " 13:27, 4 February 2008 (UTC)"
        },
        {
            "user": "Lambiam",
            "comment": "I only see the word association in this thread, starting with your \"surface association\". I maintain that the association between the Delphi snake and the language is after-the-fact. Being an association that is made later does not negate the association by itself, but it is still an association that is made later. Where do you find such endorsements of \"alternate\" interpretations? For a disclaimer, see http://www.python.org/search/hypermail/python-1992/0001.html.  --",
            "parent_section": "Python (mythology), the oracular serpent of Delphi (pun intended?) ",
            "date_time": " 21:26, 4 February 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python (mythology), the oracular serpent of Delphi (pun intended?) ",
            "date_time": " 00:24, 5 February 2008 (UTC)"
        },
        {
            "user": "Lambiam",
            "comment": " There is also no unequivocal repudiation by the Pope of the association of Roman Catholicism with the Rose Cross. So does this mean we are at liberty to herald that Roman Catholicism is associated with Rosicrucianism, using the lack of a solemn papal disavowal as corroborating evidence? The disclaimer I cited may be terse, but it is by no means a quasi-disclaimer. Your use of that terminology amounts to innuendo that the BDFL is lying in his response that there is nothing deep about it.  --",
            "parent_section": "Python (mythology), the oracular serpent of Delphi (pun intended?) ",
            "date_time": " 09:41, 5 February 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python (mythology), the oracular serpent of Delphi (pun intended?) ",
            "date_time": " 11:31, 5 February 2008 (UTC)"
        },
        {
            "user": "Lambiam",
            "comment": "Quoting the python.org website:  For me this is an authoritative direct substantiation, with or without GvR's assertion.  --",
            "parent_section": "Python (mythology), the oracular serpent of Delphi (pun intended?) ",
            "date_time": " 16:43, 5 February 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python (mythology), the oracular serpent of Delphi (pun intended?) ",
            "date_time": " 05:08, 6 February 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python (mythology), the oracular serpent of Delphi (pun intended?) ",
            "date_time": " 05:12, 6 February 2008 (UTC)"
        },
        {
            "user": "89.123.249.91",
            "comment": "don't want to be annoying, but shouldn't a page on a programming language include the traditional \"hello, world!\" program example thing? i mean it's a standard for presenting a programming language ",
            "parent_section": "hello world? ",
            "date_time": " 17:39, 15 February 2008 (UTC)"
        },
        {
            "user": "Irrevenant",
            "comment": "I searched for Phillip J Eby on Wikipedia: http://en.wikipedia.org/wiki/Special:Search?search=%22Phillip+J+Eby%22&go=Go One of the results was:  Python (programming language) ...Guido | last = van Rossum | coathors = Phillip J. Eby | work = Python Enhancement Proposals | publisher... Relevance: 88.6% - 44 KB KiB (6330 words) - 14:31, March 12, 2008I've followed the link to this page and there's no text anything like that.  I checked recent history, too.  What gives? Thanks --",
            "parent_section": "Phillip J Eby Search ",
            "date_time": " 03:05, 13 March 2008 (UTC)"
        },
        {
            "user": "TJRC",
            "comment": "  Look at the page source; it's in a cite. ",
            "parent_section": "Phillip J Eby Search ",
            "date_time": " 19:43, 13 March 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Influences ",
            "date_time": " 23:02, 21 March 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Influences ",
            "date_time": " 14:33, 22 March 2008 (UTC)"
        },
        {
            "user": "Lambiam",
            "comment": "A quotation from http://wiki.python.org/moin/PythonVsHaskell, which may be considered an authoritative source in this context: \"Python's list comprehension syntax is taken (with trivial keyword/symbol modifications) directly from Haskell.\" There are several indirect influences of SETL. One goes along the line SETL \u2192 ABC \u2192 Python. It regards the design decision to have a small set of powerful high-level datatypes.[4] Likewise, there is the line SETL \u2192 Haskell \u2192 Python  [5]. Jeremy may be remembering seeing that message. So it is true in some sense that SETL was an influence, but it is not doable in general to start listing indirect influences; almost everything that Python's designers borrowed from other languages has a pedigree.  --",
            "parent_section": "Influences ",
            "date_time": " 21:57, 22 March 2008 (UTC)"
        },
        {
            "user": "Jhylton",
            "comment": "Thanks for the extended discussion.  I agree that I was worried about writing something true rather than verifiable.  Unfortunately, lots of the reasons for the design decisions took place in office conversations that didn't make it to email.  Python development circa 2000 involved a fair amount of face-to-face conversation among the core developers. The problem with the claim that Haskell was the direct influence is that it wasn't.  Tim Peters captured it well in an email: \"He decided listcomps \"were Pythonic\" before knowing anything about Haskell (or SETL, from which Haskell took the idea). Given that he *already* liked them, the value in looking at Haskell is for its actual experience with them.  It would be pretty stupid *not* to look at experience with other languages that already have it!\"[6] We had been interested in the list comprehensions idea for a while.  The email thread on python-dev was about syntax for a feature already in the works.  At that point, knowing the Haskell and SETL had both used it successfully was encouraging.  Other languages used the same basic feature with this syntax.  I recall downloading the SETL docs to take a look.  The reason Haskell seems to have entered history as *the* influence is that it is the most modern language that has a similar syntax.--",
            "parent_section": "Influences ",
            "date_time": " 03:52, 24 March 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Influences ",
            "date_time": " 05:39, 24 March 2008 (UTC)"
        },
        {
            "user": "72.14.228.89",
            "comment": "  The text in the history section talks about list comprehensions rather than itertools.--",
            "parent_section": "Influences ",
            "date_time": " 17:04, 24 March 2008 (UTC)"
        },
        {
            "user": "Neuralwiki",
            "comment": "I am adding a link to my website where I show how to install Python on Windows Vista.  It is not intuitive and I think it is a useful addition to this page. (",
            "parent_section": "external links ",
            "date_time": " 04:13, 24 March 2008 (UTC)"
        },
        {
            "user": "74.61.6.82",
            "comment": "For the data type str and unicode it says it's \"An immutable sequence of characters\". I'm not a python expert but this seems incorrect to me. You can definitely change a string or unicode.  \u2014Preceding unsigned comment added by ",
            "parent_section": "immuteable strings? ",
            "date_time": " 21:20, 13 April 2008 (UTC)"
        },
        {
            "user": "TJRC",
            "comment": "   Actually, you can't change a string or unicode.  You can create a new one and bind it to the same name as the old one; and then the old one is discarded. ",
            "parent_section": "immuteable strings? ",
            "date_time": " 19:25, 14 April 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "immuteable strings? ",
            "date_time": " 04:40, 15 April 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "immuteable strings? ",
            "date_time": " 07:27, 15 April 2008 (UTC)"
        },
        {
            "user": "76.87.74.5",
            "comment": " I agree with David, the example he shows indicates that the strings are not immutable, at least not in the sense that a functional programming language would consider immutability.  \u2014Preceding unsigned comment added by ",
            "parent_section": "immuteable strings? ",
            "date_time": " 23:19, 21 May 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "immuteable strings? ",
            "date_time": " 18:26, 13 June 2008 (UTC)"
        },
        {
            "user": "Fredrik",
            "comment": "   At least in CPython, the id of an object is its memory address, not the hash of a string. ",
            "parent_section": "immuteable strings? ",
            "date_time": " 18:31, 13 June 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "immuteable strings? ",
            "date_time": " 19:06, 13 June 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "immuteable strings? ",
            "date_time": " 10:11, 13 June 2008 (UTC)"
        },
        {
            "user": "24.142.120.234",
            "comment": "The colon serves no useful purpose in the syntax parsing of the language. Why is it then required by the parser? It inhibits the natural expression of logic as part of program flow by adding a nonsensical characters for block delineation. See the following links for a discussion of the issue, [7] [8].  \u2014Preceding unsigned comment added by ",
            "parent_section": "Python's colon is the appendix of the language. ",
            "date_time": " 07:39, 1 May 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python's colon is the appendix of the language. ",
            "date_time": " 08:06, 1 May 2008 (UTC)"
        },
        {
            "user": "KnowBuddy",
            "comment": "Since JASC software was bought out by Corel, which proceeded to dismantle Paint Shop Pro (turning it into a mere photo editor), the existing reference (currently {41}) to it found in paragraph titled \"Usage\" no longer applies. Should that reference be omitted? If so, can someone explain to me how Wikipedia handles the references number sequences and resequencing? Does everything get automatically renumbered without skipping any number, or would omission/deletion, leave a gap in the numerical series? ",
            "parent_section": "Defunct reference [41] to defunct JASC software... ",
            "date_time": " 17:04, 30 May 2008 (UTC)"
        },
        {
            "user": "Loggie",
            "comment": "  Reference numbering happens automagically, once you delete or add a < ref > tag-the editor only has to put them there, not figure out in what order they appear in and then order them or anything. For more info see WP:FN. ",
            "parent_section": "Defunct reference [41] to defunct JASC software... ",
            "date_time": " 18:15, 30 May 2008 (UTC)"
        },
        {
            "user": "86.154.14.43",
            "comment": "A poem circulated in the module 'this': \"The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!\"Why not include this in the Philosophy section?  \u2014Preceding unsigned comment added by ",
            "parent_section": "Succinct poem to python philosophy ",
            "date_time": " 15:16, 10 June 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Succinct poem to python philosophy ",
            "date_time": " 22:35, 13 July 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "\"more-accurate, consensus, well-cited\" ",
            "date_time": " 11:26, 19 June 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "\"more-accurate, consensus, well-cited\" ",
            "date_time": " 17:28, 19 June 2008 (UTC)"
        },
        {
            "user": "TJRC",
            "comment": "I agree with Chris that it should be high-level programming language rather than very high-level programming language.  Martinelli's work is an excellent Python reference, and I don't detract from it.  But Martinelli is a known Python advocate, and advocacy is not an objective of a Wikipedia article.  There's no question that Python is high-level, but \"very high-level\" is getting more into areas of opinion. Lulu, your work on this article is appreciated, but being a long-standing editor does not bestow any particular weight to your views.  I know you're very protective of this article, but this might be a good time for you to re-read WP:OWN. ",
            "parent_section": "\"more-accurate, consensus, well-cited\" ",
            "date_time": " 18:24, 25 June 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "\"more-accurate, consensus, well-cited\" ",
            "date_time": " 04:42, 26 June 2008 (UTC)"
        },
        {
            "user": "Pointillist",
            "comment": "Solution: extend the VHLL article? Since the current VHLL article on Wikipedia is a stub (and the ACM articles require a subscription), it would be a great help if you experts (David , Chris and TJRC) could work together to get it into a generally useful state, e.g. so that non-expert software development readers can appreciate the criteria that distinguish VHLLs, HLLs, 4GLs etc. Once that groundwork is in place, it might be appropriate to add sub-sections to show why Python, Ruby &c should be regarded as VHLLs. Any debate could then take place on the VHLL talk page, which would provide a better context for the discussion. Does that work for you? - ",
            "parent_section": "\"more-accurate, consensus, well-cited\" ",
            "date_time": " 23:07, 9 July 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "\"more-accurate, consensus, well-cited\" ",
            "date_time": " 07:03, 10 July 2008 (UTC)"
        },
        {
            "user": "I80and",
            "comment": "In the Usage section, this is said:  Slackware, Red Hat Linux and Fedora use the pythonic Anaconda.AFAIK, as a long-time Slackware user, Slackware does not use Anaconda.  However, not being a Slackware guru, I'm uncomfortable with taking definitive action over this matter.  I mean, it would take some work to merge Anaconda into Slackware to make this statement true :D But seriously, if nobody disagrees within a couple days or so, I guess I'll remove Slackware from that list.--",
            "parent_section": "Slackware Anaconda? ",
            "date_time": " 13:34, 24 July 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Logo ",
            "date_time": " 07:32, 19 September 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Logo ",
            "date_time": " 13:49, 1 October 2008 (UTC)"
        },
        {
            "user": "Karl Dickman",
            "comment": "I came across a good non-trivial code sample on the German Wikipedia, an implementation of quicksort.  See de:Python_(Programmiersprache).  Perhaps I'm not looking hard enough, but I don't see an obvious place to put it.  I'm also not entirely sure what I need to do GFDL-wise to import the code sample here.  ",
            "parent_section": "Code samples ",
            "date_time": " 21:02, 25 September 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Code samples ",
            "date_time": " 21:03, 25 September 2008 (UTC)"
        },
        {
            "user": "A D Monroe III",
            "comment": "The opening paragraph doesn't mention that Python is also a scripting language.  Isn't it?  Like scripting languages, it's more interpreted than compiled, it's often used to direct other applications, and allows for unstructured use.  Without something of the sort added to the opening, it makes Python sound no better than C or C++, which are also \"general purpose high-level programming languages\".  --",
            "parent_section": "Scripting language? ",
            "date_time": " 13:55, 5 October 2008 (UTC)"
        },
        {
            "user": "Kbrose",
            "comment": "  Primarily it's an interpreted language, but I also agree with its use as a scripting language. Accordingly, I added some prose to the article for both aspects. ",
            "parent_section": "Scripting language? ",
            "date_time": " 15:07, 5 October 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Scripting language? ",
            "date_time": " 18:25, 5 October 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Scripting language? ",
            "date_time": " 21:10, 5 October 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Scripting language? ",
            "date_time": " 22:03, 5 October 2008 (UTC)"
        },
        {
            "user": "Pointillist",
            "comment": "I think LotLE is going in the right direction. Some languages are \"scriptable\" (i.e. \"can be used for efficient scripting\"), and others can't. Ideally the various language articles would just say \"Xxxx can be used as a Scripting language\", and the Scripting language article would make it clear what this means. Right now the scripting language article is all over the place, Python and Ruby aren't mentioned anywhere in the body of the article, Javascript and ECMAscript are used as interchangeable terms and\u2014unless you think the statement \"Writing in C is much more difficult than writing in the scripting languages.\" tells the full story\u2014there's no direct explanation of why \"systems languages\" are not always the ideal tool. I'll take a proper look at it tomorrow - ",
            "parent_section": "Scripting language? ",
            "date_time": " 22:47, 5 October 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Scripting language? ",
            "date_time": " 22:51, 5 October 2008 (UTC)"
        },
        {
            "user": "Fubar Obfusco",
            "comment": "I was mainly thinking about ",
            "parent_section": "Scripting language? ",
            "date_time": " 23:10, 5 October 2008 (UTC)"
        },
        {
            "user": "Wipe",
            "comment": "Somebody add one example please. ",
            "parent_section": "Where\u2019s the helloworld? ",
            "date_time": " 14:49, 12 October 2008 (UTC)"
        },
        {
            "user": "KumpelBert",
            "comment": " Hello World is simple:          print \"Hello World\"  But does it add something to this page? I don't see it. If yes I would suggest adding one or two examples at the end of chapter 4, before chapter \"Implementations\". It would be better to give the link to a long overview  \u2014Preceding unsigned comment added by ",
            "parent_section": "Where\u2019s the helloworld? ",
            "date_time": " 21:45, 14 October 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Cython ",
            "date_time": " 00:33, 13 October 2008 (UTC)"
        },
        {
            "user": "0x6adb015",
            "comment": "Is it \"van Rossum\" or \"Van Rossum\"? His personal page says: van Rossum ",
            "parent_section": "Guido's last name ",
            "date_time": " 12:06, 10 October 2008 (UTC)"
        },
        {
            "user": "KumpelBert",
            "comment": " Guido comes from Holland, in Holland is the middle name always written in lowercase. So his name should be written as \"van Rossum\"    (",
            "parent_section": "Guido's last name ",
            "date_time": " 20:32, 14 October 2008 (UTC)"
        },
        {
            "user": "64.238.49.65",
            "comment": ") Guido's web page has the correct capitalization rules.  It's Guido van Rossum, but when the first name is not present it's Van Rossum.  You can look it up in a style guide if you don't believe me (or Guido). --",
            "parent_section": "Guido's last name ",
            "date_time": " 15:01, 20 October 2008 (UTC)"
        },
        {
            "user": "Kbrose",
            "comment": " (rodney drenth)  It is proper English style to capitalize the surname prefix if the name is used without the first name. Not only is this properly described in Van Rossum's webpage, but also the correct practice in his Wikipedia article. ",
            "parent_section": "Guido's last name ",
            "date_time": " 22:17, 20 October 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Guido's last name ",
            "date_time": " 22:39, 20 October 2008 (UTC)"
        },
        {
            "user": "0x6adb015",
            "comment": " Looking up Wikipedia Van_(Dutch), it seems that we should write \"Van Rossum\", and \"Guido van Rossum\". But I do not know if this rule applies to the english language. ",
            "parent_section": "Guido's last name ",
            "date_time": " 13:00, 21 October 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Guido's last name ",
            "date_time": " 16:58, 31 October 2008 (UTC)"
        },
        {
            "user": "Tehpron",
            "comment": "Hi, I was wondering why there are no code examples in the article except for the syntax highlighting picture which doesnt really convey anything usefull about python as a language. Other programming articles such as C, C++ and Perl among others have large amount of code examples, most notably the perl article has a vast amount of examples. Is wikipedia against code examples on programming articles? I would be more then happy to post examples if someone can assure me that examples are allowed but more importantly that they are needed (I think they are) Thanks. -- I just read through the article and saw the \"Statements and control flow\" section, i think code examples for each of these statements would be usefull, do you agree? Also should the heading not be \"Statements and 'flow control'\" (pips just for emphasis) Thanks ",
            "parent_section": "Code examples ",
            "date_time": " 11:17, 21 October 2008 (UTC)"
        },
        {
            "user": "Tehpron",
            "comment": "  If nobody replies by tomorow il go ahead and add a few examples, thanks ",
            "parent_section": "Code examples ",
            "date_time": " 16:46, 27 October 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Code examples ",
            "date_time": " 17:36, 27 October 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Code examples ",
            "date_time": " 16:57, 31 October 2008 (UTC)"
        },
        {
            "user": "Txmy",
            "comment": "Unless there's something spectacular about the particular syntax used, I don't think they're necessary. thumperward put it nicely. ",
            "parent_section": "Code examples ",
            "date_time": " 19:18, 7 December 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Pictures? ",
            "date_time": " 17:00, 31 October 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Pippy ",
            "date_time": " 17:05, 4 November 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "External links ",
            "date_time": " 21:06, 20 November 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "External links ",
            "date_time": " 22:10, 20 November 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "External links ",
            "date_time": " 23:20, 20 November 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "External links ",
            "date_time": " 09:47, 25 November 2008 (UTC)"
        },
        {
            "user": "190.161.73.209",
            "comment": "this word is miss used several times, it takes to a lower level, this discipline of knowledge it some much more that \"a way we think\". I ask kindly if someone could use a another word. Philosophy its not a word to use so vaguely. --",
            "parent_section": "Philosophy ",
            "date_time": " 21:21, 24 November 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Philosophy ",
            "date_time": " 07:15, 25 November 2008 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Philosophy ",
            "date_time": " 08:24, 25 November 2008 (UTC)"
        },
        {
            "user": "0x6adb015",
            "comment": "It seems that the colored syntax box PNG-equivalent is wrongly rendered; the PNG is missing some variable that shows OK when looking at the SVG. Anybody knows how to fix that? ",
            "parent_section": "Syntax box ",
            "date_time": " 14:24, 3 February 2009 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Syntax box ",
            "date_time": " 19:24, 3 February 2009 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Syntax box ",
            "date_time": " 19:29, 3 February 2009 (UTC)"
        },
        {
            "user": "Malleus Fatuorum",
            "comment": "This discussion is transcluded from Talk:Python (programming language)/GA1. The edit link for this section can be used to add comments to the reassessment.This article has been reviewed as part of Wikipedia:WikiProject Good articles/Project quality task force. I believe the article currently meets the criteria and should remain listed as a Good article. The article history has been updated to reflect this review. This is certainly one of the better programming language GAs, but I do have a few minor observations:  External links should only appear in the External links section. So links like those in Programming philosophy and Alternative implementations should be converted to inline citations.There a couple of clarification tags that need to be dealt with.All citations should include full details, including title, publisher, and last access date.The lead is a little on the short side to adequately summarise the article.A nice piece of work nevertheless. --",
            "parent_section": "GA Reassessment ",
            "date_time": " 15:21, 3 March 2009 (UTC)"
        },
        {
            "user": "79.78.72.145",
            "comment": "Is it really needed? What ABC was inspired by seems tangential at best, let alone giving that much space to a quote from Guido about it. I'll remove it, and probably just put in a note that ABC was inspired by SETL in the history section, unless someone thinks it adds significant value. ",
            "parent_section": "Quote in the history section ",
            "date_time": " 16:48, 3 March 2009 (UTC)"
        },
        {
            "user": "TJRC",
            "comment": "  I agree.  The material in the quote is worth keeping, but it's not so special that it should be put into an offset quote. ",
            "parent_section": "Quote in the history section ",
            "date_time": " 17:12, 3 March 2009 (UTC)"
        },
        {
            "user": "En-Cu-Kou",
            "comment": "Python's official name is \"Python programming language\", as seen on the website (http://www.python.org/) and in the PSF Trademark Usage Policy (http://www.python.org/psf/trademarks/). To quote the latter:  Always use any trademark as an adjective only, followed by a generic noun. For instance, it is correct to refer to the Python programming language (adjective) but not simply to Python (noun). Don't use the trademark as a verb (\"Python your software today!\"). Despite the fact that hardly anybody uses the long name, I think that the title of this page should be \"Python programming language\", not \"Python (programming language)\" --",
            "parent_section": "Parentheses in the title ",
            "date_time": " 23:44, 17 March 2009 (UTC)"
        },
        {
            "user": "TJRC",
            "comment": "  That's a discussion of the trademark, not the language.  The language is clearly \"Python\" as the Foundation makes clear from its own use on the About page:About Python Python is a remarkably powerful dynamic programming language that is used in a wide variety of application domains. Python is often compared to Tcl, Perl, Ruby, Scheme or Java....See http://www.python.org/about/. ",
            "parent_section": "Parentheses in the title ",
            "date_time": " 05:33, 18 March 2009 (UTC)"
        },
        {
            "user": "Cybercobra",
            "comment": "See also Wikipedia's article naming conventions, which in a nutshell say to use the most common/recognizable name (not necessarily the most precise/official one), which is \"Python\" in this case, with the parens used solely to disambiguate between the other entities called Python. --",
            "parent_section": "Parentheses in the title ",
            "date_time": " 06:39, 18 March 2009 (UTC)"
        },
        {
            "user": "24.130.24.6",
            "comment": "there should be some mention of support for closures in the article, no?  \u2014Preceding unsigned comment added by ",
            "parent_section": "closures ",
            "date_time": " 05:46, 29 March 2009 (UTC)"
        },
        {
            "user": "208.240.243.170",
            "comment": "\"However, many problems are not speed critical, and as computer hardware continues to become exponentially faster (Moore's Law), languages do have more hardware resources available.\" We've hit the Von Neumann bottleneck. Processors have continued getting faster, but at a decling rate. Website traffic volumes continue to increase.  \u2014Preceding unsigned comment added by ",
            "parent_section": "Questionable Claim ",
            "date_time": " 22:59, 29 April 2009 (UTC)"
        },
        {
            "user": "Dawnofdigital",
            "comment": "\"Despite being dynamically typed, Python is strongly typed, forbidding nonsense operations (for example, adding a number to a string) rather than silently attempting to make sense of them.\" Sounds a bit critical of loosely typed languages (not that I'm a fan :) Revise? While being dynamically typed, Python is also strongly typed which forbids operations between unrelated types (for example, adding a number to a string) rather than assuming the programmer intends for one the types to be converted.  \u2014Preceding unsigned comment added by ",
            "parent_section": "Line about strong typing. ",
            "date_time": " 03:07, 1 May 2009 (UTC)"
        },
        {
            "user": "75.69.35.85",
            "comment": "The point wasn't that it was awesome python code, rather that it mocks a code example from Ruby's website with their silly perl-esq sigils and magical behavior.  Granted the python example would look nicer with the set literal syntax a la 3.0. I also subclassed list and overloaded the subtract operator to duplicate this behavior, just to prove that python > *.  \u2014Preceding unsigned comment added by ",
            "parent_section": "Example ",
            "date_time": " 11:46, 6 May 2009 (UTC)"
        },
        {
            "user": "4th-otaku",
            "comment": "Python's core is not so minimalistic. Try Forth, Lua, or Io to get a feel what should be considered as a minimalism in syntax and/or semantics.  \u2014Preceding unsigned comment added by ",
            "parent_section": "Python have plenty syntax and semantics ",
            "date_time": " 18:30, 18 May 2009 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python have plenty syntax and semantics ",
            "date_time": " 05:16, 19 May 2009 (UTC)"
        },
        {
            "user": "203.206.162.148",
            "comment": "I've got ActivePython on my PC, and I'm trying to work out where it sits as an implementation. Nothing here, nothing at the ActivePython page, nothing particular at the ActiveState website.  Is it just a re-compile of CPython?  \u2014Preceding unsigned comment added by ",
            "parent_section": "Trying to find out about ActivePython ",
            "date_time": " 05:30, 25 May 2009 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Trying to find out about ActivePython ",
            "date_time": " 07:22, 25 May 2009 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Trying to find out about ActivePython ",
            "date_time": " 09:16, 25 May 2009 (UTC)"
        },
        {
            "user": "Paxcoder",
            "comment": "This is what the intro says: {cquote|[Python] features a fully dynamic type system and automatic memory management, similar to Perl, Ruby, Scheme, and Tcl.} Memory management in that part of the article links to real memory management (the kind the OS' do). Shouldn't that read: \"garbage collection\"? If not, why? Also what kind of \"memory management\" does Scheme posess, seeing as it is a (traditional) functional programming language, and thus supports no types. Will be watching the page. Thanks in advance. --",
            "parent_section": "Memory what? ",
            "date_time": " 22:14, 27 June 2009 (UTC)"
        },
        {
            "user": "Paxcoder",
            "comment": "  Scratch that, memory management does distinguish the two (I'd still be more happy if it linked to GC, but nevermind now), please answer the second thing.--",
            "parent_section": "Memory what? ",
            "date_time": " 22:17, 27 June 2009 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Versions ",
            "date_time": " 20:54, 28 June 2009 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Versions ",
            "date_time": " 21:24, 28 June 2009 (UTC)"
        },
        {
            "user": "88.157.200.123",
            "comment": "\" Knoppix inventor Klaus Knopper handed over the Best Open Source Programming Language prize, this year hotly disputed among the jury. The distinction went to Python. \"The thing can do anything,\" Knopper expressed. Martin von L\u00f6wis of the Python Foundation accepted the award for the Python community. \" -> http://www.linux-magazine.com/online/news/cebit_2009_openstreetmap_wins_two_linux_new_media_awards  \u2014Preceding unsigned comment added by ",
            "parent_section": "Python award ",
            "date_time": " 22:23, 28 June 2009 (UTC)"
        },
        {
            "user": "79.78.91.76",
            "comment": "I think it does not deserve a mention in the 'Standard library' section, specifically because it's not in the stdlib. Natively, Python provides an interface to C++; Boost only provides some glue to make it easier. Mentioning Boost in this section is analogous to mentioning, say, SQLObject as well, because it provides glue to make database manipulation easier, on top of the sqlite (in the stdlib). Reading the section again closely, the part about extension modules should be rewritten to put the emphasis on what mechanisms are provided in vanilla CPython, rather than fiddling with specific examples and shoutouts.  \u2014Preceding unsigned comment added by ",
            "parent_section": "Boost.python ",
            "date_time": " 14:48, 18 July 2009 (UTC)"
        },
        {
            "user": "Strigoides",
            "comment": "Should something be mentioned about the easter egg in Python 3.0, i.e running the code \"import antigravity\" opening http://xkcd.com/353/?Because it sure mentions it on xkcd--",
            "parent_section": "Easter Egg ",
            "date_time": " 09:47, 24 July 2009 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Influenced list ",
            "date_time": " 21:29, 4 August 2009 (UTC)"
        },
        {
            "user": "Cybercobra",
            "comment": "  BeanShell influence is probably that Python has a REPL, which does seem marginal, and a cursory googling didn't turn up anything implicating Python in BeanShell. Falcon I'd be more reluctant about as I have a suspicion someone involved in it wrote its article, which lists Python as an influence. So, +1 on removing BeanShell, -0 on removing Falcon. --",
            "parent_section": "Influenced list ",
            "date_time": " 01:29, 5 August 2009 (UTC)"
        },
        {
            "user": "8.7.228.252",
            "comment": "TODO: I think this article would benefit from having a list of examples showing the python syntax.  \u2014Preceding unsigned comment added by ",
            "parent_section": "Examples ",
            "date_time": " 04:05, 5 November 2009 (UTC)"
        },
        {
            "user": "Peter Ballard",
            "comment": "   I don't! Wikipedia is not a manual. Most computer language articles on WP have far too many examples. The python article is a pleasant exception and it should stay that way. ",
            "parent_section": "Examples ",
            "date_time": " 00:56, 25 November 2009 (UTC)"
        },
        {
            "user": "Peter Ballard",
            "comment": "How could Java have influenced Python, since it wasn't released until 1995? ",
            "parent_section": "Influenced by Java? ",
            "date_time": " 12:00, 23 November 2009 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Influenced by Java? ",
            "date_time": " 18:08, 23 November 2009 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Influenced by Java? ",
            "date_time": " 18:08, 23 November 2009 (UTC)"
        },
        {
            "user": "Cybercobra",
            "comment": " Personally, the best example I know of is the logging module, which is very much a clone of the equivalent Java library. --",
            "parent_section": "Influenced by Java? ",
            "date_time": " 18:37, 23 November 2009 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Influenced by Java? ",
            "date_time": " 19:39, 23 November 2009 (UTC)"
        },
        {
            "user": "Peter Ballard",
            "comment": "I'll concede all that, but it seems that we're setting the \"Influenced by\" bar pretty low, and it's a bit odd seeing Java alongside Modula-3 as a Python influence. It's a fundamental problem with infoboxes (and templates, and categories) - information is presented in a binary format, with no explanation. Anyway, I'll let it pass. ",
            "parent_section": "Influenced by Java? ",
            "date_time": " 23:55, 23 November 2009 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Influenced by Java? ",
            "date_time": " 00:44, 24 November 2009 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Influenced by Java? ",
            "date_time": " 05:22, 24 November 2009 (UTC)"
        },
        {
            "user": "Jorge Stolfi",
            "comment": "The following section was removed from the article Boolean data type:begin removed text  The Python programming language allows all objects to be tested for their truth value. The following values are considered false:  Numeric zero, None, False. Empty containers such as empty strings, lists, tuples, dicts and sets. User defined object instances have control over their Boolean value through  special methods __bool__ and __len__.In all other cases, objects are considered true. An explicit bool type was added to the language in version 2.3, consisting of the values True and False, which can be used in arithmetic expressions as 1 and 0.Boolean operators and Boolean built-in types always return one of the Boolean values True and False except for the operators \"or\" and \"and\" which return one of their operands (from left to right, the first operand that determines the Boolean value of the expression).  end removed textIs there a place for this text in the Python-related articles? Perhaps in the Wikibook? Thanks, and all the best, --",
            "parent_section": "Stuff removed from Boolean data type article ",
            "date_time": " 23:59, 30 December 2009 (UTC)"
        },
        {
            "user": "89.139.110.116",
            "comment": "You should add an \"hello world\" program...  \u2014Preceding unsigned comment added by ",
            "parent_section": "Hello world ",
            "date_time": " 00:46, 6 March 2010 (UTC)"
        },
        {
            "user": "TJRC",
            "comment": "   here you go: import __hello__ ",
            "parent_section": "Hello world ",
            "date_time": " 00:57, 6 March 2010 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "No \"mere\" in scripting ",
            "date_time": " 06:44, 15 March 2010 (UTC)"
        },
        {
            "user": "JokerXtreme",
            "comment": "Wouldn't it be nice to have an example code? --",
            "parent_section": "Example? ",
            "date_time": " 11:35, 26 March 2010 (UTC)"
        },
        {
            "user": "95.147.185.198",
            "comment": "  Yes, it would. Perhaps a classic 'Hello world'. ",
            "parent_section": "Example? ",
            "date_time": " 19:20, 25 April 2010 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Example? ",
            "date_time": " 10:38, 27 April 2010 (UTC)"
        },
        {
            "user": "Dmitrey",
            "comment": "NumPy and SciPy definitely should be mentioned in the \"Mathematics\" section (currently they are mentioned in the \"Usage\" section only). For now there are some garbage about %, /, rounding floats to integers etc.  ",
            "parent_section": "Improve \"Mathematics' section ",
            "date_time": " 12:37, 26 September 2010 (UTC)"
        },
        {
            "user": "74.105.52.232",
            "comment": "It could be valuable from a novice's point of view if the article mentioned that the software is free to download. ",
            "parent_section": "Introduction ",
            "date_time": " 18:56, 23 May 2010 (UTC)"
        },
        {
            "user": "Volumebass112",
            "comment": "Can someone put a criticism section in? Python can't be totally free from criticism. --",
            "parent_section": "Criticism ",
            "date_time": " 12:29, 23 June 2010 (UTC)"
        },
        {
            "user": "Andy Dingley",
            "comment": "  The problem with such things is sourcing. When they've been done in the past, even highly regarded industry commentators have been removed as \"not being WP:RS\", because they were recognised as experts in Java, Ruby or Perl etc., but not Python. To be WP:RS for Python itself, one's assumed to have to be drinking the Kool-aid and thus unlikely to criticise it.As one of Python's obvious targets for criticism would be dynamic typing itself, we'd first need a WP article that managed to get an accurate description of dynamic typing in Python, something we don't currently have. ",
            "parent_section": "Criticism ",
            "date_time": " 12:36, 23 June 2010 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Criticism ",
            "date_time": " 05:02, 29 October 2010 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python rounding ",
            "date_time": " 11:13, 25 August 2010 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python rounding ",
            "date_time": " 10:13, 26 August 2010 (UTC)"
        },
        {
            "user": "Aflafla1",
            "comment": "Maybe could state something like 'The result of integer division rounds towards negative infinity. This maintains the validity of of the equation  b*( a/b)+a%b = a  for all integers a, and positive integers b, as Python's modulus operation a % b results in a number in the range [0,b), following usual mathematical convention.'   That's pretty verbose, though, and may not draw enough attention to the a < 0 case.  --",
            "parent_section": "Python rounding ",
            "date_time": " 18:46, 30 August 2010 (UTC)"
        },
        {
            "user": "Balfa",
            "comment": "I don't think this article (nor indeed Python's official website) makes enough of a distinction between a language called Python and piece of software called Python. ",
            "parent_section": "Language or software? ",
            "date_time": " 13:57, 6 October 2010 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Language or software? ",
            "date_time": " 05:16, 29 October 2010 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Language or software? ",
            "date_time": " 10:49, 29 October 2010 (UTC)"
        },
        {
            "user": "Hydrargyrum",
            "comment": "",
            "parent_section": "Language or software? ",
            "date_time": " 10:55, 29 October 2010 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Language or software? ",
            "date_time": " 23:07, 29 October 2010 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Language or software? ",
            "date_time": " 15:36, 30 October 2010 (UTC)"
        },
        {
            "user": "InverseHypercube",
            "comment": "  IDLE is not an interpreter, it is an IDE. ",
            "parent_section": "Language or software? ",
            "date_time": " 08:21, 2 March 2011 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Language or software? ",
            "date_time": " 08:17, 3 March 2011 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Further reading ",
            "date_time": " 05:06, 30 November 2010 (UTC)"
        },
        {
            "user": "Paddy3118",
            "comment": "  How about a 'List of books on Python (programming language)' page?   \u2014Preceding unsigned comment added by ",
            "parent_section": "Further reading ",
            "date_time": " 08:46, 30 November 2010 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Further reading ",
            "date_time": " 09:10, 30 November 2010 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Further reading ",
            "date_time": " 05:10, 30 November 2010 (UTC)"
        },
        {
            "user": "Johnuniq",
            "comment": "  Agreed, and thanks. We should not even list all books meeting the above criteria. ",
            "parent_section": "Further reading ",
            "date_time": " 07:50, 30 November 2010 (UTC)"
        },
        {
            "user": "Javaweb",
            "comment": "Least someone be left with an incorrect impression, there was no Wikipedia:COI#Self-promotion in my listing Hetland's Python book.  Peterl, I am assuming you were concerned that the list was getting out of control and did not mean anything personal. --",
            "parent_section": "Further reading ",
            "date_time": " 03:37, 6 December 2010 (UTC)"
        },
        {
            "user": "Javaweb",
            "comment": "",
            "parent_section": "Further reading ",
            "date_time": " 03:37, 2 January 2011 (UTC)"
        },
        {
            "user": "212.68.15.66",
            "comment": "I've heard that Python's performance (unless optimized) isn't that great, however, I know nothing about this myself. Can someone put something about Python's performance compared to other high-level languages?  \u2014Preceding unsigned comment added by ",
            "parent_section": "Performance ",
            "date_time": " 06:25, 3 February 2011 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Performance ",
            "date_time": " 12:22, 3 February 2011 (UTC)"
        },
        {
            "user": "212.68.15.66",
            "comment": "I totally agree with what you say about development/runtime performance (especially when it comes to Java, people are way too aggressive about its runtime performance in my opinion). Thanks for the link! ",
            "parent_section": "Performance ",
            "date_time": " 06:58, 4 February 2011 (UTC)"
        },
        {
            "user": "66.194.114.178",
            "comment": "Python and Java *can* perform well.  But they rarely *do* in my experience.   That's because high-level programming languages tend to discourage the kind of optimizations that are second-nature when doing lower-level programming.  An exception to this is PERL, because it allows (and frequently uses) inline and XS compiled code.... where high level and low-level code can be freely mixed.  \u2014Preceding unsigned comment added by ",
            "parent_section": "Performance ",
            "date_time": " 16:07, 18 May 2011 (UTC)"
        },
        {
            "user": "Joule36e5",
            "comment": "Are we assuming that nobody cares about Python 2 now?  The table of built-in types was \"simplified\" by having it refer only to Python 3.  I'm OK with that, as long as we also add a section describing the differences between 2 and 3.  (I'm not sufficiently fluent in both to create such a section myself.)  ",
            "parent_section": "Python 2 vs Python 3 ",
            "date_time": " 02:18, 10 June 2011 (UTC)"
        },
        {
            "user": "Javaweb",
            "comment": "  Python 2 will be in use for probably another 5-9 years. Most production is running under Python 2 now since programs need their library packages converted to Python 3 before they move over. --",
            "parent_section": "Python 2 vs Python 3 ",
            "date_time": " 03:04, 10 June 2011 (UTC)"
        },
        {
            "user": "Guigolum",
            "comment": "However, by the Pareto principle, most problems and sections of programs are not speed critical. No, this is an observation, not a principle : Nothing proves that in ANY program, 80% of the calculi are made by 20% of the program code. I have however no better way to express it, and as such let this as it. ",
            "parent_section": "Pareto principle ",
            "date_time": " 06:22, 4 October 2010 (UTC)"
        },
        {
            "user": "66.194.114.178",
            "comment": "  good example of the convlution required to get python to work fast: http://www.scipy.org/PerformancePython  \u2014Preceding unsigned comment added by ",
            "parent_section": "Pareto principle ",
            "date_time": " 16:14, 18 May 2011 (UTC)"
        },
        {
            "user": "122.167.224.5",
            "comment": "The Pareto principle is not a mathematical formula. The reference reads like a point is being proved based on a fact and this is not true, so the reference should be removed. ",
            "parent_section": "Pareto principle ",
            "date_time": " 13:36, 21 May 2011 (UTC)"
        },
        {
            "user": "Dlw20070716",
            "comment": "You're correct, of course, that the Pareto observation is not a mathematical formula, nor does it prove anything. However, it is a valid observation that programs spend most of their time executing inner loops and programmer effort spent 'optimizing' anything else will go entirely unnoticed. This is especially true on modern computers that frequently have large timing variations caused by such factors as pipeline bottlenecks and cache line conflicts. There is, in fact, nothing at all controversial about this, it has been known since the early days of Fortran optimizing compilers. The statement in the article did not present any controversial statement, nor did it make a claim of proof of anything. It expressed the attitude of the BDFL that code clarity is more important than a few nanocycles. If you don't like his attitude, there are other implementations of Python to satisfy your cycle-greedy hearts. I'm removing the noisy templates on this statement that add nothing to the content. ",
            "parent_section": "Pareto principle ",
            "date_time": " 07:58, 20 July 2011 (UTC)"
        },
        {
            "user": "199.212.225.1",
            "comment": "The section on syntax needs a simple helloworld program to start with :).   \u2014Preceding unsigned comment added by ",
            "parent_section": "HelloWorld ",
            "date_time": " 20:26, 23 March 2011 (UTC)"
        },
        {
            "user": "Venku Tur'Mukan",
            "comment": "   Python's hello world is so trivial Yes it is. I love Python (it's my first programming language but it's actually fun), and it's so easy it's almost funny. Anywho, Python's Hello World is simple: >>>print 'Hello World' Hello World So, yeah, it's a lot like ECHO on DOS, but probably not as noteworthy. ",
            "parent_section": "HelloWorld ",
            "date_time": " 13:37, 7 April 2011 (UTC)"
        },
        {
            "user": "86.177.104.152",
            "comment": "Strongly agree that Hello World program belongs in the article.  It is an extremely useful and quite subtle way of demonstrating syntactic, and even semantic, differences between languages.  The above comment that Python's version is simple demonstrates why inclusion of the example is important.  \u2014 Preceding unsigned comment added by ",
            "parent_section": "HelloWorld ",
            "date_time": " 07:48, 30 September 2011 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "HelloWorld ",
            "date_time": " 09:22, 2 October 2011 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "HelloWorld ",
            "date_time": " 21:57, 4 October 2011 (UTC)"
        },
        {
            "user": "A bit iffy",
            "comment": "I also agree that a \"hello world\" should be included. I came to the article to specifically see what it looked like, and then came here to ask for it. Could someone who knows the syntax please add it? --",
            "parent_section": "HelloWorld ",
            "date_time": " 08:28, 29 December 2011 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "HelloWorld ",
            "date_time": " 00:17, 30 December 2011 (UTC)"
        },
        {
            "user": "A bit iffy",
            "comment": "  Thanks. --",
            "parent_section": "HelloWorld ",
            "date_time": " 05:49, 30 December 2011 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "HelloWorld ",
            "date_time": " 10:54, 30 December 2011 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "HelloWorld ",
            "date_time": " 02:45, 2 January 2012 (UTC)"
        },
        {
            "user": "66.194.114.178",
            "comment": "I notice that, although C/C++, PERL and other languages have significant mention of drawbacks, there is no negative commentary about python.  In fact the page reads like an \"evangelists guide\" to python.  Personally I find python's whitespace-dependence to be horrible, and there are probably tens of thousands of others who take issue with the \"lisp-like\" convolution of operators... such as ... \" \".join(list). Probably this comment will be removed.\u2014Preceding unsigned comment added by ",
            "parent_section": "Drawbacks ",
            "date_time": " 16:11, 18 May 2011 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Drawbacks ",
            "date_time": " 01:01, 20 May 2011 (UTC)"
        },
        {
            "user": "Athaba",
            "comment": " I agree this article needs more criticism, especially because most flaws in Python are technical, not philosophical, when compared to Perl and therefor are much better suited for a neutral Wikipedia. Also Perl has some kind of workaround for all of the criticism (Moose for OO to give an example), something that Python has in many cases, but not in all of them. However I'd, like in all programming related articles add criticism in form of fact mentioned in various sections of the articles. This would make it harder to include opinions. Also I wouldn't include quotes, because they are NEVER neutral. --",
            "parent_section": "Drawbacks ",
            "date_time": " 13:50, 18 August 2011 (UTC)"
        },
        {
            "user": "108.2.124.115",
            "comment": " Consider a programmer picking a language that they would like to learn, it is wise to weigh the pros and cons of the language so as to determine where the language fits best. This article cannot help with that sort of endeavor without delving in to some of the negative aspects of the language (the preachers of the church of Python need not comment). If I knew more python I would help, perhaps someone who has used python in more production projects would like to take a shot? ",
            "parent_section": "Drawbacks ",
            "date_time": " 03:57, 2 September 2011 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Drawbacks ",
            "date_time": " 09:39, 2 September 2011 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Drawbacks ",
            "date_time": " 23:35, 3 September 2011 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Drawbacks ",
            "date_time": " 07:00, 4 September 2011 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Typing in the sidebar ",
            "date_time": " 22:18, 6 July 2011 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Typing in the sidebar ",
            "date_time": " 00:54, 7 July 2011 (UTC)"
        },
        {
            "user": "Cybercobra",
            "comment": " I think you are confusing strong and static. See our articles on them. --",
            "parent_section": "Typing in the sidebar ",
            "date_time": " 03:44, 7 July 2011 (UTC)"
        },
        {
            "user": "Jason Quinn",
            "comment": "What does \"general purpose\" mean in the lead here? What would be an example of a non-general purpose programming language? To me, the phrase \"general purpose\" implies that it's not tied to a specific situation but I think that is implicitly implied when you say \"programming language\" anyway. Perhaps there's a technical usage of the term I am unaware of. ",
            "parent_section": "\"general purpose\" ",
            "date_time": " 17:28, 29 September 2011 (UTC)"
        },
        {
            "user": "Cybercobra",
            "comment": "  \"General purpose\" as opposed to domain-specific (e.g. R (programming language), whose use is generally limited to statistics). --",
            "parent_section": "\"general purpose\" ",
            "date_time": " 18:02, 29 September 2011 (UTC)"
        },
        {
            "user": "Lrekucki",
            "comment": "This three claims do not have any strong backing references. The \"Java\" thing is especially weird, because  Python was created 4 years *before* Java and I can't even name a single feature added later that would be similar to Java. Dunno about Perl. As for Lisp, we already say it's influenced by Haskell, which is influenced by Lisp - I don't think there was much direct influence. I propose removing all three if no one can come up with citations.  ",
            "parent_section": "Influence by Java, Lisp or Perl ? ",
            "date_time": " 07:42, 24 February 2012 (UTC)"
        },
        {
            "user": "Cybercobra",
            "comment": "  The syntax for decorators, and the logging std lib module take direct inspiration from Java. --",
            "parent_section": "Influence by Java, Lisp or Perl ? ",
            "date_time": " 09:42, 24 February 2012 (UTC)"
        },
        {
            "user": "Lrekucki",
            "comment": " Agreed about the decorators, but I don't think logging (or unittest based directly on JUnit or any other stdlib module) should be treated as an influence to Python (the language). ",
            "parent_section": "Influence by Java, Lisp or Perl ? ",
            "date_time": " 15:30, 24 February 2012 (UTC)"
        },
        {
            "user": "Cybercobra",
            "comment": " With Perl, it's basically an \"anti-influence\". Python in part define(d) itself in contrast to Perl; see 3rd-to-last paragraph of Programming philosophy. --",
            "parent_section": "Influence by Java, Lisp or Perl ? ",
            "date_time": " 09:54, 24 February 2012 (UTC)"
        },
        {
            "user": "Lrekucki",
            "comment": " This is a bit confusing. Any standard way to mark this as \"anti-influence\" as you called it ? ",
            "parent_section": "Influence by Java, Lisp or Perl ? ",
            "date_time": " 15:30, 24 February 2012 (UTC)"
        },
        {
            "user": "Lrekucki",
            "comment": "On a side note, are there any rules for marking major influences (like marking them as bold) ? ",
            "parent_section": "Influence by Java, Lisp or Perl ? ",
            "date_time": " 15:30, 24 February 2012 (UTC)"
        },
        {
            "user": "Cybercobra",
            "comment": "  Nope. --",
            "parent_section": "Influence by Java, Lisp or Perl ? ",
            "date_time": " 22:23, 24 February 2012 (UTC)"
        },
        {
            "user": "Derek farn",
            "comment": "A fan of language X claims it has \"remarkable power with very clear syntax\", is it worthy of quoting this statement in the introduction of a Wikipedia article?  I think it is as worthy of mention as quoting somebody who is not a fan of Python who claims it is \"as powerful as most modern languages but not as readable\". Is there any empirical research measuring clearness of syntax (I am not aware of any and I have looked)?  What method did the person being quoted use to measure clarity? What remarkable power does Python have?  Can it compute functions that cannot be computed by a Turing machine?  If not then it is just as powerful as most other programming language. This \"remarkable power...\" quote is pure POV puff and should be removed. ",
            "parent_section": "Everything is remarkable ",
            "date_time": " 14:46, 29 May 2012 (UTC)"
        },
        {
            "user": "Cybercobra",
            "comment": "  Python is generally known for having a comparatively \"clean\" syntax. The description is from the official FAQ, not some random author, and is appropriately qualified (\"claims to\", as opposed to a factual \"is\" statement). \"Power\" as in being high-level (compared to e.g. C; it's a scripting language); do you have a suggestion for a better description for this aspect? --",
            "parent_section": "Everything is remarkable ",
            "date_time": " 18:46, 29 May 2012 (UTC)"
        },
        {
            "user": "Derek farn",
            "comment": " Who is the \"generally known\"?  Has there been a poll of users of different languages?  You are now saying Python has \"clean syntax\" the quote calls it \"clear syntax\", can you tell me how to measure the cleanness and clearness of a language syntax?The Python FAQ should probably be regarded as self serving statement made by people who are fans of the language, i.e., it is not an unbiased source of information.If high-level language was intended why was the word \"power\" used?  C users seem to regard their language as being high-level.  Does \"power\" imply scripting (I don't user Python for scripting and I have known developers use C for scripting {no idea why})?Your points about Python being a high-level language and scripting are good ones, why not put them in the introduction.  The quote reads like advertising copy and is out of place in a Wikipedia article that aims to be objective. ",
            "parent_section": "Everything is remarkable ",
            "date_time": " 22:51, 29 May 2012 (UTC)"
        },
        {
            "user": "Vadmium",
            "comment": " I\u2019d consider that quote a primary source and I always thought is was given too much emphasis, being in the second sentence of the article. If you want people to take it seriously, perhaps find a quote saying the developers design Python with these goals in mind. I\u2019m guessing \u201cpower\u201d means something like \u201cprogramming efficiency\u201d, like putting together a complex system in ten minutes and fifty lines of code without even thinking about it. ",
            "parent_section": "Everything is remarkable ",
            "date_time": " 01:48, 30 May 2012 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Everything is remarkable ",
            "date_time": " 10:19, 30 May 2012 (UTC)"
        },
        {
            "user": "Derek farn",
            "comment": "What does \"remarkable power\" mean and how does it differ from \"Powerful\" or even \"unremarkable power\"?  What languages are not remarkably powerful and how is this quantity measured?  It sounds like advertising puff to me.   ",
            "parent_section": "Everything is remarkable ",
            "date_time": " 10:56, 30 May 2012 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Everything is remarkable ",
            "date_time": " 23:28, 31 May 2012 (UTC)"
        },
        {
            "user": "Vadmium",
            "comment": " Man page (unformatted): Misc/python.man from Python\u2019s source code repository, and a 1994 version. The Unix Power Tools reference added the other day is just quoting from the Python web site: \"What is Python?\", 2002, and the Fipy manual also uses very similar wording to the man page. ",
            "parent_section": "Everything is remarkable ",
            "date_time": " 03:01, 1 June 2012 (UTC)"
        },
        {
            "user": "Marko Knoebl",
            "comment": ".So far we have had three different guesses at what \"remarkable power\" refers to in this discussion: 1) \"high-level\" 2) \"programming efficiency\" 3) \"useful, powerful\" (Please correct me if I have misinterpreted anyone's comment) Therefore I think that using this terminology is a bad idea as it is obviously ambiguous and I'd like to have this statement removed or replaced. --",
            "parent_section": "Everything is remarkable ",
            "date_time": " 08:23, 4 June 2012 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Everything is remarkable ",
            "date_time": " 21:45, 4 June 2012 (UTC)"
        },
        {
            "user": "Marko Knoebl",
            "comment": " I don't see much value in this because only the Python designers really know what \"remarkable power\" is supposed to refer to. You already said that your interpretation was just a guess.--",
            "parent_section": "Everything is remarkable ",
            "date_time": " 14:26, 5 June 2012 (UTC)"
        },
        {
            "user": "Cybercobra",
            "comment": " I see no such ambiguity; all 3 phrasings refer to the same property, AIUI. I do admit that it's hard to find a definitive name for the property, though \"high-level\" seems fairly well accepted. I concur with Peter that we just need to properly attribute the source. Would striking or replacing the \"remarkable\" qualifier satisfy your concerns? --",
            "parent_section": "Everything is remarkable ",
            "date_time": " 22:56, 4 June 2012 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Everything is remarkable ",
            "date_time": " 05:11, 5 June 2012 (UTC)"
        },
        {
            "user": "Marko Knoebl",
            "comment": "To me, all these 3 phrases have a different meaning: For example, I consider Java a high-level language whith a low programming efficiency. Furthermore in the past this article attributed Python's power to its large standard library - this article's version from 23 April says: 'Python claims to combine \"remarkable power with very clear syntax\" by using a large and comprehensive standard library and a design philosophy which emphasizes code readability.' You are saying that \"high-level\" is a fairly well accepted term for the attribute you want to describe. Ok, so let's use that term! I have absoulutely no problem with calling Python a high-level language: This term is relatively well-defined. --",
            "parent_section": "Everything is remarkable ",
            "date_time": " 14:26, 5 June 2012 (UTC)"
        },
        {
            "user": "Marko Knoebl",
            "comment": " Would it be okay if I changed the introduction to say that Python is a high-level language and that its syntax is clear and expressive? I think this reflects the properties which some call \"powerful\" and is less ambiguous. --",
            "parent_section": "Everything is remarkable ",
            "date_time": " 15:33, 9 June 2012 (UTC)"
        },
        {
            "user": "Derek farn",
            "comment": "If we are going to include a quote extolling the virtues of Python, by its creators, as unbiased editors we should also include a quote from one of Python's detractors (I don't have one to hand but I'm sure we can find one). ",
            "parent_section": "Everything is remarkable ",
            "date_time": " 14:13, 5 June 2012 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Everything is remarkable ",
            "date_time": " 04:05, 6 June 2012 (UTC)"
        },
        {
            "user": "208.54.5.146",
            "comment": "The claim 'OCaml has an optional syntax, called twt (The Whitespace Thing), inspired by Python and Haskell.' is not strictly true: OCaml+TWT is a separate non-standard tool that compiles a variant of OCaml to standard OCaml -- it is in no way part of OCaml; neither is it supported by any of the OCaml tools. (F# -- an OCaml-like language -- however, has 'light' syntax that uses whitespace / indentation, much like Python and Haskell.) \u2014 Preceding unsigned comment added by ",
            "parent_section": "Incorrect Claim ",
            "date_time": " 19:19, 23 July 2012 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Weasel? ",
            "date_time": " 06:17, 22 August 2012 (UTC)"
        },
        {
            "user": "Shlomif",
            "comment": "Importing a good piece of advice from the Perl programming language talk page, the page could use some short pieces of example code. I would have written this myself, but I'm not sure if my Python style is very Pythonic or not. ",
            "parent_section": "Some code samples are needed ",
            "date_time": " 18:07, 26 November 2012 (UTC)"
        },
        {
            "user": "Hibou57",
            "comment": "I added (note that I did not remove the original assertion and reference) this alternative contradictory reference to the assertion Python's syntax is clear:  or ugly<ref>[http://c2.com/cgi/wiki?PythonProblems Python Problems]: \u201c<cite>Underscores for privates members are ugly</cite>\u201d (among other comments)</ref>Someone (anonymously) later removed it, arguing the reference, which is c2.com, the Portland Patterns Repository, is not a valid source. Unfortunately, Wikipedia often cite the Portland Patterns Repository as a reference. So: either leave it or remove all reference to Portland Patterns Repository? Other options: either remove the assertion \u201cPython syntax is said to be clear\u201d or leave the contradictory option? (to keep the document neutral). It's likely if your only source is at Python advocates places, and you consider just these and only these sources are valid references, you obviously won't get anything else. I believe there is a neutrality issue here. By the way, there could be a \u201ccriticism\u201d section in that page, as there is enough materials and references to feed such a section. --",
            "parent_section": "\u201cPython syntax clear\u201d (neutrality issue) ",
            "date_time": " 13:27, 14 September 2012 (UTC)"
        },
        {
            "user": "Hibou57",
            "comment": "  The reference given to assert Python syntax is clear, is actually just this: \u201cMark Summerfield. Rapid GUI Programming with Python and Qt. \"If you are new to Python: Welcome! You are about to discover a language that is clear to read and write, and that is concise without being cryptic.\"\u201d Not even a reference: in a book? a talk-show? a blog? The person who remove my reference, asserted it's source is not valid. But that citation without even a source is valid to that person? There is an issue here. Then, second \u201creference\u201d follow, related to the assertion Python is expressive, which is just a quote, without any reference: \u201cMark Summerfield. Rapid GUI Programming with Python and Qt. \"Python is a very expressive language, which means that we can usually write far fewer lines of Python code than would be required for an equivalent application written in, say, C++ or Java.\"\u201d Same story: quoted from who/what? Where is the reference? I don't believe Mark Summerfield's personal words (without giving any source for it above all), which is not a programming language specialist, but a Qt developer, do value more than an as much personal opinion (with a reference at least) expressed at the Portland Repository, which at least comes with more materials around. --",
            "parent_section": "\u201cPython syntax clear\u201d (neutrality issue) ",
            "date_time": " 13:44, 14 September 2012 (UTC)"
        },
        {
            "user": "Andy Dingley",
            "comment": "WP:OSE.   C2 clearly isn't WP:RS, and this isn't changed even if other WP articles cite it.  OTOH, not all references are required to meet WP:RS anyway. IMHO, the private identifier syntax is ugly, at least when it requires direct access to name-mangled methods. ",
            "parent_section": "\u201cPython syntax clear\u201d (neutrality issue) ",
            "date_time": " 13:50, 14 September 2012 (UTC)"
        },
        {
            "user": "Hibou57",
            "comment": "I've removed the ref, as the reference only talks about underscores on privates being ugly, not the whole syntax. I can't find any ref saying the whole of Python's syntax is ugly - if anything the exact opposite. It's not fair to give the 'ugly' statement the same prominence as clear in the very first sentence. I've added back in a ref from Python's own description at [4] which is where we ended up up with 'said to be' rather than 'is'. peterl (talk)\u201csaid to be\u201d is obviously not as strong as \u201cis\u201d, but that does not solve the issue (which is somewhat minor in some aspect, but still suspicious). What about just keeping the reference to the Python wiki and removing the two quotes from Mark Summerfield? --",
            "parent_section": "\u201cPython syntax clear\u201d (neutrality issue) ",
            "date_time": " 17:08, 11 October 2012 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "\u201cPython syntax clear\u201d (neutrality issue) ",
            "date_time": " 21:13, 11 October 2012 (UTC)"
        },
        {
            "user": "Awinter cs",
            "comment": " I'm uncomfortable with saying python's syntax enables shorter programs. This is definitely true in certain cases with list comprehensions, but for the most part you can pack just as much into a line of C. Sometimes more, for example if (int a=call()) output(a); else output(!a);. Those two lines of C would be three lines in python. Maybe a better statement would be 'python's tersely designed and comprehensive standard library often results in shorter programs than low-level languages like C'. Python's syntax was designed to be easy to parse which made it less flexible than C. It's not syntax that makes python programs shorter, it's the standard library. ",
            "parent_section": "\u201cPython syntax clear\u201d (neutrality issue) ",
            "date_time": " 16:48, 8 April 2013 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "\u201cPython syntax clear\u201d (neutrality issue) ",
            "date_time": " 22:03, 8 April 2013 (UTC)"
        },
        {
            "user": "Awinter cs",
            "comment": "It's in the first paragraph. 'Python's syntax allows programmers to express concepts in fewer lines of code'. ",
            "parent_section": "\u201cPython syntax clear\u201d (neutrality issue) ",
            "date_time": " 02:45, 9 April 2013 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "\u201cPython syntax clear\u201d (neutrality issue) ",
            "date_time": " 03:17, 9 April 2013 (UTC)"
        },
        {
            "user": "Awinter cs",
            "comment": "do you mean link [12], the google books result? It worked the second time I clicked it. It's just one of those equivalence charts saying that one statement in python is worth 6 in C. I've never understood these -- C++, if not C, could be as concise as python if we wrote loosely-typed libraries for it that are as slow as python. It's not the language, it's the libraries. Regarding the wording of this article, maybe it's okay as-is; the distinction between syntax and libraries might not mean a lot to anybody who doesn't already know the difference. ",
            "parent_section": "\u201cPython syntax clear\u201d (neutrality issue) ",
            "date_time": " 21:00, 11 April 2013 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "\u201cPython syntax clear\u201d (neutrality issue) ",
            "date_time": " 22:59, 11 April 2013 (UTC)"
        },
        {
            "user": "Millsabord",
            "comment": "I'm not a python expert but I think it should be pointed out that the statement \"Python is [...] interpreted high-level programming language\" at the beginning of the article is at least misleading...and at most wrong. As it is explained here and here, in the reference implementation a Python program is compiled into bytecode --",
            "parent_section": "Interpreted vs compiled ",
            "date_time": " 22:57, 27 January 2013 (UTC)"
        },
        {
            "user": "91.114.185.145",
            "comment": "  I agree that the term interpreted is not well-defined. However I think Python definitely qualifies for all modern definitions of interpreted. As explained in Interpreter (computing), direct execution of source code is very rare. As far as I know no modern programming language uses this technique anymore. So excluding Python from the group of interpreted languages would basically mean that there are no interpreted languages at all. Anyhow I'm not strongly opposed to removing it as the term is definitely ambiguous.--",
            "parent_section": "Interpreted vs compiled ",
            "date_time": " 13:06, 28 January 2013 (UTC)"
        },
        {
            "user": "Carbo1200",
            "comment": "@User:",
            "parent_section": "Interpreted vs compiled ",
            "date_time": " 14:03, 28 January 2013 (UTC)"
        },
        {
            "user": "2A01:170:1078:1:0:0:0:10AA",
            "comment": "On this page, it is said in the right hand box, that Python \"appears\" in 1991. On this other page: http://en.wikipedia.org/wiki/History_of_Python , it is noted that Python 2.0 was released 16 October 2000 (quote from that page), but there have been releases 1.5 and 1.3, at least (I have a book about Python version 1.5). Therefore, I dispute the stated date. But I don't know the correct date, or otherwise, I would have corrected it. ",
            "parent_section": "History wrong ",
            "date_time": " 04:58, 3 March 2013 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "History wrong ",
            "date_time": " 05:03, 3 March 2013 (UTC)"
        },
        {
            "user": "Marko Knoebl",
            "comment": "Recently the following sentence was added to the lead section and to the section Use:   \"Python is the third most popular programming language whose grammatical syntax is not predominantly based on C\"Personally I think that this fact is not relevant enough to be included in the article. There are probably more important facts about Python's popularity (e.g. according to TIOBE it's the second most popular dynamic language - I think this is much more relevant). Furthermore the TIOBE index and its methods of ranking have been criticised (see article) and there are other rankings that put Python in a different place. I will remove the sentence from the lead section now and I would also like to remove it from the article body. If you disagree, let's discuss it here. --",
            "parent_section": "\"Third most popular language not based on C\" - relevance ",
            "date_time": " 18:05, 10 June 2013 (UTC)"
        },
        {
            "user": "98.248.237.50",
            "comment": " Python's popularity is an important piece of information to give the reader a sense of the language being described.  There are hundreds (thousands?) of computer programming languages.  Why should the reader care about Python?  A big factor is its popularity -- that's a major reason why the reader should continue beyond the introduction.  The TIOBE index might not be perfect, but why throw it out?  Identifying Python as the second most popular dynamic language would work too.  \u2014 Preceding unsigned comment added by ",
            "parent_section": "\"Third most popular language not based on C\" - relevance ",
            "date_time": " 06:07, 11 June 2013 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "\"Third most popular language not based on C\" - relevance ",
            "date_time": " 12:32, 11 June 2013 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "\"Third most popular language not based on C\" - relevance ",
            "date_time": " 00:40, 13 June 2013 (UTC)"
        },
        {
            "user": "Marko Knoebl",
            "comment": "Thanks for the comments so far. I definitely agree that Python's popularity is important and should be mentioned in this article. My concern was only that the description of Python as the \"third most popular programming language whose syntax is not predominantly based on C\" was too specific. I think Peterl solved this nicely with his edits to the lead section by stating that \"Python is a popular [...] programming language\". I think we can keep the introduction this way. Is that OK? Concerning the remaining sentence in the article body: What about writing it less specifically here as well? What about stating: \"Python is one of the most popular programming languages not predominantly based on C\"? That statement is much easier to prove by multiple sources and won't change over time. (According to the TIOBE index Python was not third in February 2013 - it was second, and has remained very close to number two ever since) Anyways I still think that the criterion \"not predominantly based on C\" is not that relevant and I'd rather prefer the sentence \"Python is one of the most popular dynamic langages.\" -",
            "parent_section": "\"Third most popular language not based on C\" - relevance ",
            "date_time": " 17:09, 15 June 2013 (UTC)"
        },
        {
            "user": "Nali4Freedom",
            "comment": "I think calling a language \"weakly typed\" or \"strongly typed\" is a poor and ambiguous description. Strong typing can mean a language is statically typed, has type safety or both depending on the context. In this case only type safety and not the static typing applies.  The fact that one could say both C++ and Python are strongly typed when meaning completely different things (dynamic typing plus type safety, vs static typing plus type unsafety) makes this a very poor term that should be avoided in my opinion. Additionally, as the Strong and weak typing article describes, these are often not objective terms and mostly used when criticizing or advocating a particular language. I would advocate changing the type system description from strongly typed to safely typed.  Along the same lines, I think the line   Despite being dynamically typed, Python is strongly typed, forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them. should be rewritten or removed. The argument that not allowing using the + operator on numbers and strings means a type system is strong is a straw man. I can create a class in Python that does absurd things with the + operator but that does not mean the type system is any stronger or weaker. It simply means I have the freedom to overload that operator however I choose, and that the language designers had the good sense not to overload the + operator for numbers and strings (or not to add an implicit conversion from numbers to strings). ",
            "parent_section": "Describing Python as Strongly typed is ambigious ",
            "date_time": " 19:03, 17 June 2013 (UTC)"
        },
        {
            "user": "Marko Knoebl",
            "comment": "  I agree: I think both should be changed. --",
            "parent_section": "Describing Python as Strongly typed is ambigious ",
            "date_time": " 10:03, 20 June 2013 (UTC)"
        },
        {
            "user": "107.3.156.34",
            "comment": "I think it would be easier to read the section entitled \"Use\" if it included a bullet pointed list.  Here's a start:  Scientific computing (NumPy, SciPy, Sage, etc.) web dev (Django, etc.) admin scripting (Salt, bcfg2, OpenStack) game scripting (Civilization 4, etc.) 3D applications (Blender, etc.) Linux applications (nearly everything in Ubuntu) Largescale web development (e.g. Instagram which is Django, Disqus, Quora) Game creation (Eve Online, etc.) Neuroscience.[6] Bioinformatics Crossplatform GUI applications Robotics (Pyro, etc.) Raspberry PiFYI, the starting point for this list is in this thread: http://www.reddit.com/r/Python/comments/1k74jb/ruby_vs_python/ .  There's more good information there on the topic. Perhaps the Use section could even be split in two: \"Use\" and \"Applications,\" where the Use section discusses the language's popularity generally, while the Applications section has a bullet list like this.  Others are welcome to revise/incorporate this comment as they like.  Thanks.  ",
            "parent_section": "Bullet point list of Uses/Applications ",
            "date_time": " 17:09, 11 February 2014 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Bullet point list of Uses/Applications ",
            "date_time": " 20:56, 11 February 2014 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Bullet point list of Uses/Applications ",
            "date_time": " 21:22, 11 February 2014 (UTC)"
        },
        {
            "user": "107.3.156.34",
            "comment": "Perhaps articles should be primarily readable as prose, but there are plenty of examples in Wikipedia of bullet lists being used appropriately within that context.  Indeed, this Python article already has ten such bullet lists :), and I would not be supportive of removing them.  They're quite helpful for the reader.  I'd suggest adding some \"meat\" to each bullet list that isn't otherwise self-descriptive.  ",
            "parent_section": "Bullet point list of Uses/Applications ",
            "date_time": " 22:04, 20 March 2014 (UTC)"
        },
        {
            "user": "211.225.33.104",
            "comment": "According to an undocumented statement in Wik simple English, running speed for C is (up to?) 200 times faster than Python.  Ef this is anywhere near correct, it should be documented and included in our article. ",
            "parent_section": "Speed ",
            "date_time": " 06:57, 16 June 2014 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Speed ",
            "date_time": " 07:48, 16 June 2014 (UTC)"
        },
        {
            "user": "John Vandenberg",
            "comment": "The table of types only describes Python 3 types, and it describes 'str' as 'A character string: an immutable sequence of Unicode codepoints.' which is of course very true for python 3, but very wrong in python 2.  Python 2 is still quite commonly used, and in python 2 str is ASCII rather than unicode, and there is a base type 'basestring' and a subclass 'unicode'. There are likely other differences between the two versions, and I think it is worth having them side by side in the table, rather than only describe Python 3.  The other main difference I can see is that py3 int is essentially the py2 long, and py3 'bytes' is probably buffer() in py2, but I am not sure about that one. If we didnt include python 2 in the table, I would like to add a note under the table that explains that the Python 3 'str' and 'int' are the Python 2 'unicode' and 'long', and the Python 2 types 'str' and 'int', which existed due to hardware/architecture/performance issues rather than ideal-world language \"beauty\", have been dropped in Python 3. ",
            "parent_section": "Python 2 types ",
            "date_time": " 06:00, 12 July 2014 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Influenced Javascript ",
            "date_time": " 21:19, 4 November 2014 (UTC)"
        },
        {
            "user": "Andy Dingley",
            "comment": "  Wouldn't they be more convincing if they contained the word \"Python\"? ",
            "parent_section": "Influenced Javascript ",
            "date_time": " 21:44, 4 November 2014 (UTC)"
        },
        {
            "user": "50.46.176.46",
            "comment": "The article lists Java as an influence and the citation just mentions decorators as being influenced by Java.  That seems like a pretty small influence.  Seems like there either needs to be a better citation or maybe Java (which evidently didn't appear until 4 years after Python) shouldn't be on the lengthy list of influences. ",
            "parent_section": "Influenced by Java? ",
            "date_time": " 05:14, 24 October 2014 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Influenced by Java? ",
            "date_time": " 09:56, 5 November 2014 (UTC)"
        },
        {
            "user": "Andy Dingley",
            "comment": " The trouble is that this is a very minor influence, yet the hive-mind at WP will probably now categorize Python as a \"Java-based language\". Decorators didn't come from Java - they were long pre-existing before Java, and before most WP editors were born. What Python took from Java was a convenient syntactic style for representing decorators in source, no more. ",
            "parent_section": "Influenced by Java? ",
            "date_time": " 10:20, 5 November 2014 (UTC)"
        },
        {
            "user": "Andy Dingley",
            "comment": "Is Python duck typed?   re [7] IMHO, we should take this term out and burn it. The term \"duck typing\" is badly skunked: it so abused and misused that no-one knows what it means. Firstly few can define it and secondly (and most importantly) it's used to mean two contradictory things so frequently that no-one can ever communicate anything by its use. \"Duck typing\" first became popular because Martelli in 2000 [8] used it in reference to Python. However (as almost no-one remembers today) he used it in contrast to Python. I can define \"duck typing\". I can even define \"duck typing in Python\". And if you tell me first whether you think Python is, or is not duck typed, then I can explain what it means and how Python is (or is not, whichever you favour) following it. The term just has no consistent definition, or a definition that can be in any way illuminating in an article on Python. w:Duck typing is beyond hope, but also beyond AfD. However we should not spread the confusion or nonsense further than it has already gone. The term should never be used around Python coders. ",
            "parent_section": "Duck typing? ",
            "date_time": " 21:36, 13 March 2015 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Duck typing? ",
            "date_time": " 01:32, 15 March 2015 (UTC)"
        },
        {
            "user": "Andy Dingley",
            "comment": " With what part? ",
            "parent_section": "Duck typing? ",
            "date_time": " 01:43, 15 March 2015 (UTC)"
        },
        {
            "user": "I8086",
            "comment": " Hi. I'd like to interrupt and show this example.  output:  Quaaaaaack! A cat cannot quack. Fine...quack...happy? A dog cannot quack.  The above shows that i will act like a duck and quack() regardless of its class type and it will throw a graceful error if it cannot quack(). This leads me to believe that Python is pretty duck typed. I also disagree. --",
            "parent_section": "Duck typing? ",
            "date_time": " 21:11, 15 March 2015 (UTC)"
        },
        {
            "user": "Andy Dingley",
            "comment": "  Your example doesn't really illustrate the problem. We all know that this is how Python behaves. The question is, is this duck typing?  Per Martelli's original association of the term to a Python context, this isn't duck typing. Duck typing, following the spirit of the original expression \"If it walks like a duck and quacks like a duck, then it's a duck\" is based on judging a set of behaviours in order to assign an identity. This is not what Python does - Python avoids the need to deal with such identities, because behaviours (i.e. supported methods) are independent. In Python we just don't care about whether things are ducks or not, or even if they \"can be treated as ducks\", we simply work at the level of \"Make it quack if it can\", \"Make it walk if it can\" and then we leave it at that. The question here for this article is even simpler. If we recognise that \"duck typing\" is a useless term in software because there is no agreed meaning for it (can you cite a more authoritative source than Martelli?) and that the two meanings differ so far as to simply contradict each other, then does it help or hinder this article to include the term?  ",
            "parent_section": "Duck typing? ",
            "date_time": " 22:54, 15 March 2015 (UTC)"
        },
        {
            "user": "I8086",
            "comment": "Here's a definition straight from the Python Documentation:A programming style which does not look at an object\u2019s type to determine if it has the right interface; instead, the method or attribute is simply called or used (\u201cIf it looks like a duck and quacks like a duck, it must be a duck.\u201d) By emphasizing interfaces rather than specific types, well-designed code improves its flexibility by allowing polymorphic substitution. Duck-typing avoids tests using type() or isinstance(). (Note, however, that duck-typing can be complemented with abstract base classes.) Instead, it typically employs hasattr() tests or EAFP programming.This means you can call a method of any object while having EAFP (like the above example) in case you can't call that said method. So, along with that, I don't see why it should be removed; I find duck typing important. --",
            "parent_section": "Duck typing? ",
            "date_time": " 01:11, 16 March 2015 (UTC)"
        },
        {
            "user": "84.85.246.226",
            "comment": "As you probably know, most programming languages on Wikipedia have a Hello World section. Any chance of adding it? The syntax is pretty simple: `print \"Hello, world\"` for Python 2.x and `print(\"Hello, World\")` for python 3.x. I would love to add it myself, but I'm no Wikipedia editor. ",
            "parent_section": "Hello world? ",
            "date_time": " 15:45, 31 March 2015 (UTC)"
        },
        {
            "user": "Andy Dingley",
            "comment": "  No. What new facet would this explain about Python? Hello World is, by its nature, trivial. Trivial examples rarely demonstrate much. ",
            "parent_section": "Hello world? ",
            "date_time": " 17:40, 31 March 2015 (UTC)"
        },
        {
            "user": "84.85.246.226",
            "comment": " Ok, sorry about that :) ",
            "parent_section": "Hello world? ",
            "date_time": " 06:35, 1 April 2015 (UTC)"
        },
        {
            "user": "Wiki lofi",
            "comment": "Pythonics find solutions without Java three times faster with Python. Non-Pythonics can't write Pythonic.  \u2014 Preceding unsigned comment added by ",
            "parent_section": "Speed comparison ",
            "date_time": " 07:55, 25 August 2015 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "External links modified ",
            "date_time": " 10:17, 27 August 2015 (UTC)"
        },
        {
            "user": "85.193.214.150",
            "comment": "I had been struggling for years with terrible Tkinter, wxPython, BOA, Glide, etc. until I discovered PyQt with its fantastic VISUAL Qt_Designer, which is free software. ",
            "parent_section": "There is no word about the best GUI builder: Qt_Designer. Why? ",
            "date_time": " 18:18, 12 October 2015 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "There is no word about the best GUI builder: Qt_Designer. Why? ",
            "date_time": " 09:11, 13 October 2015 (UTC)"
        },
        {
            "user": "Clozinski",
            "comment": "I just linked to blogory.org after reading the policy guidelines.  Understandably Wikipedia is very sensitive about links, and so I want to  be most respectful of the site.  In case there is any concern about my posting,  here is the background.  I run blogory.org.  As of today, Jan 19, 2016 it has 169 links about Python, and 63 links about zodb.  Blogory.org is a site very similar to DMOZ or Yahoo Directory. In contrast DMOZ,  has 328 links about Python, and 1 link about zodb.  Really DMOZ is so out of date.  So I linked to the appropriate pages of my website from Wikipedia->Python blogory.org/python and from Wikipedia->zodb blogory.org/zodb I presume that is okay under the external links policy: \"A well-chosen link to a directory of websites or organizations. Long lists of links are not acceptable. A directory link may be a permanent link or a temporary measure put in place while external links are being discussed on the article's talk page.\" Please let me know if there is anything I should do to make this link more appealing to the Wikipedia community.   ",
            "parent_section": "COI ",
            "date_time": " 14:07, 19 January 2016 (UTC)"
        },
        {
            "user": "Clozinski",
            "comment": "  Please see User talk:",
            "parent_section": "COI ",
            "date_time": " 14:15, 19 January 2016 (UTC)"
        },
        {
            "user": "Marko Knoebl",
            "comment": "Currently the paragraph on the \"=\" statement is very long and does not really go well with the explanations on other statements. For example the 'if' statement is described like this:  The if statement, which conditionally executes a block of code, along with else and elif (a contraction of else-if).This is easy to understand for even for beginners. On the other hand the \"=\" statement is described like this:  The assignment statement (token '=', the equals sign). This operates differently than in traditional imperative programming languages, and this fundamental mechanism (including the nature of Python's version of \"variables\") illuminates many other features of the language.  Assignment in C, e.g., \"x = 2\", translates to \"typed variable name x receives a copy of numeric value 2\". The (right-hand) value is copied into an allocated storage location for which the (left-hand) variable name is the symbolic address. The memory allocated to the variable is large enough (potentially quite large) for the declared type.  In the simplest case of Python assignment, using the same example, \"x = 2\", translates to \"(generic) name x receives a reference to a separate, dynamically allocated object of numeric (int) type of value 2.\"  This is referred to as \"binding\" the name to the object. Since the name's storage location doesn't \"contain\" the indicated value, it is not proper to refer to it as a \"variable.\"  Names may be subsequently re-bound at any time to objects of wildly varying types, including strings, procedures, complex objects with data and methods, etc. Successive assignments of a common value to  multiple names, e.g., \"x = 2\"; \"y = 2\"; \"z  = 2\" result in allocating storage to (at most) three names and a single numeric object, to which all three names are bound. Since a name is a generic reference holder it is not reasonable to associate a fixed data type with it.  However at a given time a name will be bound to some object, which will have a type; thus there is dynamic typing.I think this is too complicated and doesn't fit with the rest of this list. My suggestion would be:  The assignment statement =, which assigns a value to a variable.We could move the longer version to Python syntax and semantics. What do you think? --",
            "parent_section": "List of statements: style of paragraph on \"=\" statement does not fit with other statements ",
            "date_time": " 23:09, 1 February 2016 (UTC)"
        },
        {
            "user": "Viam Ferream",
            "comment": "  There is no point in a para that says \"The assignment statement =, which assigns a value to a variable.\", no more than there is in the statement \"The if statement, which conditionally executes a block of code, along with else and elif (a contraction of else-if).\"  Both of these are trivially obvious to anyone with the rudimentary level of knowledge we would assume for a reader interested in an article on a specific programming language. Both fail WP:MANUAL (by not even reaching that level!). Is there a single reader who reads past the lead (which introduces Python as an unsurprising block-structured procedural language) and will then learn anything new from such a bland statement? If we are to have descriptions no more detail than that, then we might as well state nothing about the assignment operator or the if statement at all and just save the length. Python's assignment operator is a little more than this though. This article goes into it in some depth. This is useful depth and generally to be commended. We need more like that, not less. We could move it, as there is an article at Python syntax and semantics. Given the two levels of articles this is viable. It's not there as yet and it is needed there. This description is quite important for understanding Python behaviour. So I'd be OK with moving it, but I'd prefer to keep it and maybe re-cast it as an explanation of a broader typing and instancing concept than just \"explaining what assignment operators are\". It shouldn't be lost though. I don't like the idea either of replacing it with the bland statement.  Of the two, I'd rather delete the vacuous and pointless explanation of the if statement. We're not a manual, we don't have to list every feature. Our job is to explain Python and its characteristic features, not exhaustively document it for a beginner's lesson. Our readers already understand the basics of assignment and conditional branches. ",
            "parent_section": "List of statements: style of paragraph on \"=\" statement does not fit with other statements ",
            "date_time": " 13:03, 2 February 2016 (UTC)"
        },
        {
            "user": "Marko Knoebl",
            "comment": "Thanks for your constructive comments. What bothers me about the section is that it somehow diminishes the article's readability as more and more (unrelated) stuff is put in the section \"Statements and control flow\". If you look at that section from 2007 you'll see that it just included five statements. (In my eyes these five statements are amongst the \"central\" ones in Python and give a quite good overview of the language). In the past this section has been expanded to include many other (less significant) statements and has also absorbed other topics like coroutines or (in the edit at hand) an explanation of dynamic typing and reference types. I'm wondering if we should restructure the section entirely and get rid of the list of statements (presenting its current content in a more meaningful way) --",
            "parent_section": "List of statements: style of paragraph on \"=\" statement does not fit with other statements ",
            "date_time": " 22:40, 4 February 2016 (UTC)"
        },
        {
            "user": "Snori",
            "comment": "I made bold change, but will now revert it myself after seeing that this has been under active discussion. I think my change was OK, but I should have come here first. ",
            "parent_section": "List of statements: style of paragraph on \"=\" statement does not fit with other statements ",
            "date_time": " 06:00, 20 September 2016 (UTC)"
        },
        {
            "user": "Jmacwiki",
            "comment": "Under Typing, we currently have, \"Type constraints are not checked at compile time...\", although Python is introduced as an interpreted language.  This is a paradox (as the linked articles for \"compile time\" and \"interpreted language\" support).   What is the intended meaning here?  There seem to be two possibilities: 1. \"Type constraints are not checked once, statically, but only when and if they are executed\" (could even be independently checked every time they are executed). 2. \"On those occasions when Python code is to be compiled instead of interpreted (as with PyPy, Cython, or other), type constraints are not checked at compile time.\" ",
            "parent_section": "\"Compile time\" ",
            "date_time": " 05:36, 4 December 2016 (UTC)"
        },
        {
            "user": "Andrew Gunner",
            "comment": "Some other Wikipedia pages about programming languages have a subheader titled \"criticism\". Python's page doesn't have that. List criticism below to add it to the future subheader. ",
            "parent_section": "Needs \"Criticism\" ",
            "date_time": " 18:24, 23 February 2017 (UTC)"
        },
        {
            "user": "ChamithN",
            "comment": "  Criticism should rather be represented in prose instead of a list. Nevertheless, make sure to cite sources. -- ",
            "parent_section": "Needs \"Criticism\" ",
            "date_time": " 18:57, 23 February 2017 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Needs \"Criticism\" ",
            "date_time": " 21:10, 23 February 2017 (UTC)"
        },
        {
            "user": "Mister Infamous",
            "comment": "https://docs.python.org/3/whatsnew/3.6.html--",
            "parent_section": "As of Python 3.6, there is literal string interpolation ",
            "date_time": " 05:53, 7 March 2017 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "As of Python 3.6, there is literal string interpolation ",
            "date_time": " 00:05, 8 March 2017 (UTC)"
        },
        {
            "user": "Rich Farmbrough",
            "comment": " Thanks! All the best: ",
            "parent_section": "As of Python 3.6, there is literal string interpolation ",
            "date_time": " 19:16, 15 April 2017 (UTC)"
        },
        {
            "user": "InternetArchiveBot",
            "comment": "Hello fellow Wikipedians, I have just modified 5 external links on Python (programming language). Please take a moment to review my edit. If you have any questions, or need the bot to ignore the links, or the page altogether, please visit this simple FaQ for additional information. I made the following changes:  Added archive https://web.archive.org/web/20070501105422/http://www.amk.ca/python/writing/gvr-interview to http://www.amk.ca/python/writing/gvr-interview Corrected formatting/usage for https://www.python.org/community/pycon/dc2004/papers/24/metaclasses-pycon.pdf Corrected formatting/usage for http://www.2kgames.com/civ4/blog_03.htm Corrected formatting/usage for https://code.google.com/apis/documents/docs/1.0/developers_guide_python.html Added archive https://web.archive.org/web/20081229095320/http://www.computerworld.com.au/index.php/id%3B66665771 to http://www.computerworld.com.au/index.php/id;66665771When you have finished reviewing my changes, you may follow the instructions on the template below to fix any issues with the URLs. As of February 2018, \"External links modified\" talk page sections are no longer generated or monitored by ",
            "parent_section": "External links modified ",
            "date_time": " 22:12, 1 December 2017 (UTC)"
        },
        {
            "user": "KDS4444",
            "comment": "I just read over the article, and came away mostly baffled.  I am reasonably computer literate, and recognize some of the terms in the lead, but came away with only a slightly better understanding of Python than I had before I read it.  Someone with more expertise needs to take a shot at making this more readable for the general public.  Imagine your mom reading this, your mom who knows how to send and receive emails and can open up a Word document but who has never modified her computer registry or attempted to replace her internal hard drive\u2014 she knows there is a difference between a Mac and a PC, but isn't sure what it is.  How would you explain Python to her in a way that would allow her to understand it?  That is what this article needs to fix.  The multiple links in the lead, etc., are good for obtaining this information, but Mom shouldn't have to click on a bunch of links to understand the basics of this article.  Anyhow, someone please think about it.  Thanks!  ",
            "parent_section": "Technical tag ",
            "date_time": " 23:30, 21 August 2017 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Technical tag ",
            "date_time": " 09:10, 22 August 2017 (UTC)"
        },
        {
            "user": "Danieldanielcolo",
            "comment": "I agree the article should be more readable for the general public, and this is also true for other programming language articles. When reading a wikipedia article about a car or a plant, I do not generally find a flow of bombastic jargon terms about the physics inside the engine or some very technical biology stuff. For example, is it really necessary to say \"object-oriented, imperative, functional and procedural\"? At least it seems non necessary to say it is procedural, this is not a very in-depth information, most useful languages used in engineering (not academia) are procedural; it does not mean so much to me.",
            "parent_section": "Technical tag ",
            "date_time": " 09:55, 25 February 2018 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Technical tag ",
            "date_time": " 08:24, 27 February 2018 (UTC)"
        },
        {
            "user": "CrazyMinecart88",
            "comment": "I disagree as well. I only started a little while ago,and I think I've gotten the hang of it. Here are some reasons I think it's good: 1.It has \"batteries included\". That means it comes with everything you need to get started. 2.It has good documentation. There is a pretty big online community, and the download comes with a help program. There are also lots of books. 3.Good for beginners. Python is easy to learn,but very powerful. I think you should try. ",
            "parent_section": "Technical tag ",
            "date_time": " 19:09, 25 February 2018 (UTC)"
        },
        {
            "user": "Adpete",
            "comment": "The lead says, \"and a syntax that allows programmers to express concepts in fewer lines of code\". Should that be removed? I have two problems. One, fewer than what (it says fewer than C or Java, but that's not saying much because they're small languages)? And two, it's not my experience anyway: compared to some languages (e.g. Perl, Matlab), I'd say Python is more verbose but also more readable. And it's not what I'd call a defining feature of python. ",
            "parent_section": "\"fewer lines of code\"  in lead? ",
            "date_time": " 01:36, 14 March 2018 (UTC)"
        },
        {
            "user": "Adpete",
            "comment": "  OK, I'm removing it. ",
            "parent_section": "\"fewer lines of code\"  in lead? ",
            "date_time": " 02:02, 21 March 2018 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "\"fewer lines of code\"  in lead? ",
            "date_time": " 03:27, 21 March 2018 (UTC)"
        },
        {
            "user": "Adpete",
            "comment": "  Well I think you'd struggle to find a language which is less verbose than C for creating a linked list. But for the sentence to belong in the lead (let alone the first paragraph), Python should be less verbose than all, or nearly all, other languages. One ref says it is less verbose than C or Java (but I suspect that is also true for most other languages), and the other has a table showing 1/(lines of code): C 1, C++ 2.5, Fortran 2, Java 2.5, Visual Basic 4.5, Python Perl and Smalltalk all 6. So it's ahead of some pretty small languages, and equal with Perl and Smalltalk - nothing special. And it's from studies done in 1998-2000, so out of date. ",
            "parent_section": "\"fewer lines of code\"  in lead? ",
            "date_time": " 06:05, 21 March 2018 (UTC)"
        },
        {
            "user": "Andy Dingley",
            "comment": "Should the second sentence of the lead in our very highest level introductory article on Python throw new readers immediately into the issue of Py2 vs Py3? See [2] & [3]. ",
            "parent_section": "Python 2 & 3 ",
            "date_time": " 09:53, 18 April 2018 (UTC)"
        },
        {
            "user": "Johnuniq",
            "comment": "  No, thanks for removing it. I take the point about 2 and 3 being different languages, but that is a detail for elsewhere in the article. ",
            "parent_section": "Python 2 & 3 ",
            "date_time": " 10:02, 18 April 2018 (UTC)"
        },
        {
            "user": "Andy Dingley",
            "comment": " I think it's more than a \"detail\" and could use a substantial section. However it doesn't belong so early.  Python is growing rapidly at the moment. A lot of Python coders now (by head count, rather than LoC count) have simply never used 2.  We could even try an article on the two (easily notable), but I think that would probably get stomped as WP:NOTMANUAL. ",
            "parent_section": "Python 2 & 3 ",
            "date_time": " 10:09, 18 April 2018 (UTC)"
        },
        {
            "user": "Muhareer",
            "comment": "Hello. New wiki editor here so I apologize if this topic has been hashed out before(although I couldn't find it in the talk archives). Would it be a good idea to add a short section about commond, and free, ways that programmers learn Python? I am thinking Python's built in library turtle, Google's free python course, etc. Since many people who land on this wiki will have at least a cursory interest in actually learning the basics of Python, it seems like a good place to encourage free and open source materials. ",
            "parent_section": "Adding a \"Learning Methods\" section ",
            "date_time": " 15:32, 23 August 2018 (UTC)"
        },
        {
            "user": "ALTAF ANSARI04/sandbox",
            "comment": "  It would have to be compliant with WP:NOTHOWTO. User:",
            "parent_section": "Adding a \"Learning Methods\" section ",
            "date_time": " 09:21, 24 August 2018 (UTC)"
        },
        {
            "user": "2001:638:A0A:1192:1CFE:845C:B132:107F",
            "comment": "Delete \"(see Wikipedia's \"Python IDE\" article), \" since there is not such article (any more?) and the link target is the same as the \"see also\" a few lines above. ",
            "parent_section": "Semi-protected edit request on 17 September 2018 ",
            "date_time": " 10:59, 17 September 2018 (UTC)"
        },
        {
            "user": "L293D",
            "comment": "   Done ",
            "parent_section": "Semi-protected edit request on 17 September 2018 ",
            "date_time": " 11:45, 17 September 2018 (UTC)"
        },
        {
            "user": "73.221.162.176",
            "comment": "I came to this page to read about Python, but first I had to sit through how awesome the creator is, how long he worked as a leader and innovator, see a picture of him drinking beer...   \u2014 Preceding unsigned comment added by ",
            "parent_section": "Reads like a fan page ",
            "date_time": " 15:05, 16 October 2018 (UTC)"
        },
        {
            "user": "DavidMCEddy",
            "comment": "   Agreed.  I cut the \"History\" section substantially and substituted a different photo of van Rossum from Commons:Category:Guido van Rossum.  Because there are separates article on the history of Python and Guido van Rossum, I hope we won't get too many complaints about these changes.In the future, please feel free to make these kinds of changes yourself.  The Wikimedia culture encourages us to be bold but not reckless, writing from a neutral point of view, citing credible sources.In particular, if you still think that this reads like a fan page, feel free to make other edits -- but don't be surprised or offended if others have have different ideas.  There's a fine art to communicating more by saying less.  ",
            "parent_section": "Reads like a fan page ",
            "date_time": " 16:33, 16 October 2018 (UTC)"
        },
        {
            "user": "Quizdog",
            "comment": "in the section  Statements and control flow it says under the description of the for keyword that it:  iterates over an iterable object, capturing each element to a local variable for use by the attached block.  the variable that the for loop uses is NOT local to the body of the loop, it is GLOBAL to the file:  for name in ['ted', 'ed', 'ned']:     pass  print(name)    # this will print 'ned' because name is NOT local  (interestingly the loop variable in a list comprehension or generator expression IS local.) ",
            "parent_section": "the loop variable of a for loop is NOT local in Python, it is global ",
            "date_time": " 03:32, 24 November 2018 (UTC)"
        },
        {
            "user": "Johnuniq",
            "comment": "  Well it's not global to the file. If the above is in a function, name cannot be accessed from another function. ",
            "parent_section": "the loop variable of a for loop is NOT local in Python, it is global ",
            "date_time": " 04:05, 24 November 2018 (UTC)"
        },
        {
            "user": "216.228.181.182",
            "comment": "Who's doing the math here -- some magazine article?  Even December 1989 until July 2018 isn't 30 years.  Therefore September 1990 through July 2018 is definitely less than 30 years.  If Wikipedia is just duplicating glorified journalistic fluff then what good is it? \u2014 Preceding unsigned comment added by ",
            "parent_section": "Steps down after 30 years ",
            "date_time": " 12:44, 12 August 2018 (UTC)"
        },
        {
            "user": "Beland",
            "comment": "  It's from one of the cited sources, which I think was just rounding up. It obviously differs a bit depending on when you count the start, so rather than coming up with something original I just removed the claim for now. -- ",
            "parent_section": "Steps down after 30 years ",
            "date_time": " 18:32, 30 November 2018 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Order of implementations in the infobox ",
            "date_time": " 22:29, 13 March 2019 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Order of implementations in the infobox ",
            "date_time": " 09:00, 14 March 2019 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Nomination of Portal:Python (programming language) for deletion ",
            "date_time": " 00:44, 26 March 2019 (UTC)"
        },
        {
            "user": "Beland",
            "comment": "PEP8 redirects here but is not explained in the article. -- ",
            "parent_section": "PEP 8 ",
            "date_time": " 15:48, 30 November 2018 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "PEP 8 ",
            "date_time": " 04:51, 26 March 2019 (UTC)"
        },
        {
            "user": "Sam Tomato",
            "comment": "There is a section Languages influenced by Python. There should also be a section describing what languages that influenced Python. It seems likely to me that some of the features that are listed as being influenced by Python were actually features of languages that existed prior to Python. ",
            "parent_section": "Languages that influenced Python ",
            "date_time": " 17:03, 27 July 2019 (UTC)"
        },
        {
            "user": "Reinthaler",
            "comment": "GDScript is the language of the Godot Game Engine. It's influenced from Python, so it should be added in the \"from Python influenced\" list. ",
            "parent_section": "Python influenced GDScript ",
            "date_time": " 08:48, 8 August 2019 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Version history ",
            "date_time": " 08:35, 9 August 2019 (UTC)"
        },
        {
            "user": "2600:1700:D591:5F10:6DC4:DCDB:94D9:A227",
            "comment": "First-most, Python borrowed heavily from Perl, not the syntax, but the API functions, and conglomeration of awk, set, perl, etc functionality.  Having much experience with Python in its first 2 years, the main take away is that it is like Perl in terms of getting things done without the convoluted syntax.  \u2014 Preceding unsigned comment added by ",
            "parent_section": "Perl is the basis ",
            "date_time": " 22:41, 26 August 2019 (UTC)"
        },
        {
            "user": "89.70.225.106",
            "comment": "I see that GraalPython https://github.com/graalvm/graalpython is missing from the list of implementations. It's a Python 3 implementation (in contrast to Jython which is Python 2 implementation). GraalPython has a low overhead Polyglot API to interact with other languages that GraalVM supports: https://www.graalvm.org/docs/reference-manual/polyglot/ That should be included somewhere.  \u2014 Preceding unsigned comment added by ",
            "parent_section": "Python implementation in GraalVM ",
            "date_time": " 10:45, 6 January 2020 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python implementation in GraalVM ",
            "date_time": " 05:06, 10 January 2020 (UTC)"
        },
        {
            "user": "89.70.180.143",
            "comment": "Well, https://github.com/RustPython/RustPython is mentioned but it states the following: Disclaimer RustPython is in a development phase and should not be used in production or a fault intolerant setting. Our current build supports only a subset of Python syntax. \u2014 Preceding unsigned comment added by ",
            "parent_section": "Python implementation in GraalVM ",
            "date_time": " 14:06, 21 March 2020 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python implementation in GraalVM ",
            "date_time": " 17:19, 22 March 2020 (UTC)"
        },
        {
            "user": "Guy Macon",
            "comment": " MicroPython doesn't not include parts of Python because it isn't finished, but rather by design. MicroPython is intended for microcontrollers with orders of magnitude less performance and memory than desktop systems, and thus purposely leaves out features that won't fit. Thus MicroPython should be considered a subset of Python, not an implementation of Python. --",
            "parent_section": "Python implementation in GraalVM ",
            "date_time": " 17:49, 22 March 2020 (UTC)"
        },
        {
            "user": "134.160.214.17",
            "comment": "How can there be no more than a single, unassuming sentence, about the huge backlash and excruciatingly slow adoption process?",
            "parent_section": "Python 3 upgrade fiasco ",
            "date_time": " 08:01, 19 March 2020 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python 3 upgrade fiasco ",
            "date_time": " 18:29, 19 March 2020 (UTC)"
        },
        {
            "user": "Guy Macon",
            "comment": "It is not clear that the \"incredible-disaster-of-python-3\" described in the second link is actually python doing something wrong. As [3] asks, \"Are you arguing that the zip implementation in Python should adhere to the zip(1) behavior instead of the zip specification? An advantage of the Python implementation is that zip archives are portable across systems. This is not the case with the Linux implementation. For example, using the example t.zip (created on a Linux system) I get this error if I attempt to extract it on my Mac: error: cannot create test.txt Illegal byte sequence.\" Python deciding to sacrifice an exact imitation of the way zip works in Linux in order to get zip archives that are portable between Linux and Mac appears to be a perfectly reasonable design decision. The author is, of course, free to disagree with that decision, but we as an encyclopedia should not take sides regarding that disagreement. If it is notable enough (which I doubt) we might want to describe the disagreement without taking sides. --",
            "parent_section": "Python 3 upgrade fiasco ",
            "date_time": " 20:42, 19 March 2020 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python 3 upgrade fiasco ",
            "date_time": " 10:40, 20 March 2020 (UTC)"
        },
        {
            "user": "BernardoSulzbach",
            "comment": "Pointless. Calling it a fiasco, or \"a thing that is a complete failure, especially in a ludicrous or humiliating way\", clearly seems like a strangely emotional opinion from a user that couldn't bother to create an account. Adoption was slow: the GCP command line tools just upgraded to Python 3 after Python 2 was officially deprecated if I am not mistaken. However, Python 2 got the security patches it needed and kept being a viable alternative for quite some time. ",
            "parent_section": "Python 3 upgrade fiasco ",
            "date_time": " 21:17, 19 March 2020 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Python 3 upgrade fiasco ",
            "date_time": " 10:40, 20 March 2020 (UTC)"
        },
        {
            "user": "Simulator-master",
            "comment": "Can you Pending changes protect this page? Because many people will go here, and what if they get wrong info beacause this page got vandalized? You can verify the page, right? if you Pending changes protect this page?  \u2014 Preceding unsigned comment added by ",
            "parent_section": "Pending changes protection ",
            "date_time": " 08:24, 9 July 2020 (UTC)"
        },
        {
            "user": "Deacon Vorbis",
            "comment": "@",
            "parent_section": "Pronunciation in US and UK ",
            "date_time": " 16:27, 16 October 2020 (UTC)"
        },
        {
            "user": "Hooman Mallahzadeh",
            "comment": "  @",
            "parent_section": "Pronunciation in US and UK ",
            "date_time": " 16:34, 16 October 2020 (UTC)"
        },
        {
            "user": "Deacon Vorbis",
            "comment": " (edit conflict) Once again, please stop separating what should be one paragraph into four; it makes stuff a pain to read.  MOS:LEADPRON says: \"If the name of the article has a pronunciation that is not apparent from its spelling, include its pronunciation ... Do not include them for common English words ...\"  Python is a reasonably common word whose pronunciation is apparent from its spelling, so it shouldn't be included.  \u2013",
            "parent_section": "Pronunciation in US and UK ",
            "date_time": " 16:35, 16 October 2020 (UTC)"
        },
        {
            "user": "Deacon Vorbis",
            "comment": " @",
            "parent_section": "Pronunciation in US and UK ",
            "date_time": " 16:41, 16 October 2020 (UTC)"
        },
        {
            "user": "Deacon Vorbis",
            "comment": " No, the difference isn't important.  That German WP gives a pronunciation is neither surprising nor relevant. \u2013",
            "parent_section": "Pronunciation in US and UK ",
            "date_time": " 16:48, 16 October 2020 (UTC)"
        },
        {
            "user": "Deacon Vorbis",
            "comment": " @",
            "parent_section": "Pronunciation in US and UK ",
            "date_time": " 16:56, 16 October 2020 (UTC)"
        },
        {
            "user": "Deacon Vorbis",
            "comment": " Did I stutter? \u2013",
            "parent_section": "Pronunciation in US and UK ",
            "date_time": " 16:58, 16 October 2020 (UTC)"
        },
        {
            "user": "Hooman Mallahzadeh",
            "comment": " ",
            "parent_section": "Pronunciation in US and UK ",
            "date_time": " 17:10, 16 October 2020 (UTC)"
        },
        {
            "user": "Fbergo",
            "comment": "Python is a common English word, and its pronunciation is not unusual. As already pointed out, per wikipedia policy, this pronunciation should not be in the lead. Wikipedia is not a dictionary (WP:ISNOT). Actually, there is a dictionary project here: [4]. That's where you go when you have doubts about the meaning or pronunciation of common words of the language. ",
            "parent_section": "Pronunciation in US and UK ",
            "date_time": " 17:09, 16 October 2020 (UTC)"
        },
        {
            "user": "Guy Macon",
            "comment": "Python is a computer language from the Netherlands, named after a group of comedians in the UK, who are in turn named after a family of snakes found in Africa, Asia, and Australia. They chose that name because it sounds funny.If you want to know how Python's Benevolent dictator for life, Guido van Rossum pronounces it, see Guido van Rossum - Python Language - PyCon 2016.If you want to know how the UK comedians pronounce it, see Monty Python's Flying Circus (Intro) S2 (1970).If you want to know how Wikipedia pronounces it, go to [ https://en.wiktionary.org/wiki/Python ].If you want to insert any of the above pronunciations into this Wikipedia article, go away. We only add pronunciation for unusual words that the reader is unlikely to have heard before. --",
            "parent_section": "Pronunciation in US and UK ",
            "date_time": " 21:55, 16 October 2020 (UTC)"
        },
        {
            "user": "SystemBuilder",
            "comment": "Everywhere I have worked people are using the \"six\" libraries to make code runnable under both python 2.x and 3.x.  Can we say something, either in the introduction, or in the second that talks about the 2to3 library, about six?  It seems too important to leave out of this overview of python. ",
            "parent_section": "Can we add something about the \"six\" libraries? ",
            "date_time": " 21:55, 3 December 2020 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Can we add something about the \"six\" libraries? ",
            "date_time": " 00:55, 4 December 2020 (UTC)"
        },
        {
            "user": "Guy Macon",
            "comment": " Python 2 has been discontinued. There is no longer any need for any tool that \"makes code runnable under both python 2.x and 3.x.\" We talk about the 2to3 library because it helps you to stop using Python 2 and start using Python 3. --",
            "parent_section": "Can we add something about the \"six\" libraries? ",
            "date_time": " 02:07, 4 December 2020 (UTC)"
        },
        {
            "user": "SystemBuilder",
            "comment": "Okay, in a larger sense I think there should be a larger historical section about python 2.x->3.x migration.  What motivated all these changes as some appear to be stylistic and possibly unnecessy?  It is quite unusual to make so many backwards not-compatible changes in the next version of a language (for example I believe C/C++ and Fortran have never done it, and maybe not Java but I don't know.)  That section would talk about from __future__ import xyz and the six.py libraries and the 2to3 library, etc.  ",
            "parent_section": "Can we add something about the \"six\" libraries? ",
            "date_time": " 08:33, 4 December 2020 (UTC)"
        },
        {
            "user": "Guy Macon",
            "comment": "The reason why there are so many more changes is because the developers made what we now know was a bad decision, Python 2 was released in 2000. Python 3 was released in 2008. Python 2 was supposed to end in 2015. The bad decision was to postpone that to 2020, hoping that users would upgrade. Of course they didn't, and the two versions grew farther and farther apart. And, BTW, C did make a huge change; larger that Python's change. They just decided to call it C++ instead of just giving it a new version number. --",
            "parent_section": "Can we add something about the \"six\" libraries? ",
            "date_time": " 17:09, 4 December 2020 (UTC)"
        },
        {
            "user": "",
            "comment": "",
            "parent_section": "Can we add something about the \"six\" libraries? ",
            "date_time": " 02:51, 5 December 2020 (UTC)"
        }
    ]
}